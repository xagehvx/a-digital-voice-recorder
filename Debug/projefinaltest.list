
projefinaltest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e20  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001edc  08001edc  00011edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f6c  08001f6c  00011f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f70  08001f70  00011f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  08001f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a4  20000064  08001fd8  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000108  08001fd8  00020108  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000364c  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c42  00000000  00000000  000236d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001f0  00000000  00000000  00024320  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00024510  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000018cc  00000000  00000000  00024678  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000c4a  00000000  00000000  00025f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00026b8e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000634  00000000  00000000  00026c0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000064 	.word	0x20000064
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001ec4 	.word	0x08001ec4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000068 	.word	0x20000068
 8000100:	08001ec4 	.word	0x08001ec4

08000104 <__divsi3>:
 8000104:	4603      	mov	r3, r0
 8000106:	430b      	orrs	r3, r1
 8000108:	d47f      	bmi.n	800020a <__divsi3+0x106>
 800010a:	2200      	movs	r2, #0
 800010c:	0843      	lsrs	r3, r0, #1
 800010e:	428b      	cmp	r3, r1
 8000110:	d374      	bcc.n	80001fc <__divsi3+0xf8>
 8000112:	0903      	lsrs	r3, r0, #4
 8000114:	428b      	cmp	r3, r1
 8000116:	d35f      	bcc.n	80001d8 <__divsi3+0xd4>
 8000118:	0a03      	lsrs	r3, r0, #8
 800011a:	428b      	cmp	r3, r1
 800011c:	d344      	bcc.n	80001a8 <__divsi3+0xa4>
 800011e:	0b03      	lsrs	r3, r0, #12
 8000120:	428b      	cmp	r3, r1
 8000122:	d328      	bcc.n	8000176 <__divsi3+0x72>
 8000124:	0c03      	lsrs	r3, r0, #16
 8000126:	428b      	cmp	r3, r1
 8000128:	d30d      	bcc.n	8000146 <__divsi3+0x42>
 800012a:	22ff      	movs	r2, #255	; 0xff
 800012c:	0209      	lsls	r1, r1, #8
 800012e:	ba12      	rev	r2, r2
 8000130:	0c03      	lsrs	r3, r0, #16
 8000132:	428b      	cmp	r3, r1
 8000134:	d302      	bcc.n	800013c <__divsi3+0x38>
 8000136:	1212      	asrs	r2, r2, #8
 8000138:	0209      	lsls	r1, r1, #8
 800013a:	d065      	beq.n	8000208 <__divsi3+0x104>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d319      	bcc.n	8000176 <__divsi3+0x72>
 8000142:	e000      	b.n	8000146 <__divsi3+0x42>
 8000144:	0a09      	lsrs	r1, r1, #8
 8000146:	0bc3      	lsrs	r3, r0, #15
 8000148:	428b      	cmp	r3, r1
 800014a:	d301      	bcc.n	8000150 <__divsi3+0x4c>
 800014c:	03cb      	lsls	r3, r1, #15
 800014e:	1ac0      	subs	r0, r0, r3
 8000150:	4152      	adcs	r2, r2
 8000152:	0b83      	lsrs	r3, r0, #14
 8000154:	428b      	cmp	r3, r1
 8000156:	d301      	bcc.n	800015c <__divsi3+0x58>
 8000158:	038b      	lsls	r3, r1, #14
 800015a:	1ac0      	subs	r0, r0, r3
 800015c:	4152      	adcs	r2, r2
 800015e:	0b43      	lsrs	r3, r0, #13
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__divsi3+0x64>
 8000164:	034b      	lsls	r3, r1, #13
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__divsi3+0x70>
 8000170:	030b      	lsls	r3, r1, #12
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0ac3      	lsrs	r3, r0, #11
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__divsi3+0x7c>
 800017c:	02cb      	lsls	r3, r1, #11
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0a83      	lsrs	r3, r0, #10
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__divsi3+0x88>
 8000188:	028b      	lsls	r3, r1, #10
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	0a43      	lsrs	r3, r0, #9
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__divsi3+0x94>
 8000194:	024b      	lsls	r3, r1, #9
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0a03      	lsrs	r3, r0, #8
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__divsi3+0xa0>
 80001a0:	020b      	lsls	r3, r1, #8
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	d2cd      	bcs.n	8000144 <__divsi3+0x40>
 80001a8:	09c3      	lsrs	r3, r0, #7
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__divsi3+0xae>
 80001ae:	01cb      	lsls	r3, r1, #7
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0983      	lsrs	r3, r0, #6
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__divsi3+0xba>
 80001ba:	018b      	lsls	r3, r1, #6
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0943      	lsrs	r3, r0, #5
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__divsi3+0xc6>
 80001c6:	014b      	lsls	r3, r1, #5
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0903      	lsrs	r3, r0, #4
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__divsi3+0xd2>
 80001d2:	010b      	lsls	r3, r1, #4
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	08c3      	lsrs	r3, r0, #3
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__divsi3+0xde>
 80001de:	00cb      	lsls	r3, r1, #3
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0883      	lsrs	r3, r0, #2
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__divsi3+0xea>
 80001ea:	008b      	lsls	r3, r1, #2
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0843      	lsrs	r3, r0, #1
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__divsi3+0xf6>
 80001f6:	004b      	lsls	r3, r1, #1
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	1a41      	subs	r1, r0, r1
 80001fe:	d200      	bcs.n	8000202 <__divsi3+0xfe>
 8000200:	4601      	mov	r1, r0
 8000202:	4152      	adcs	r2, r2
 8000204:	4610      	mov	r0, r2
 8000206:	4770      	bx	lr
 8000208:	e05d      	b.n	80002c6 <__divsi3+0x1c2>
 800020a:	0fca      	lsrs	r2, r1, #31
 800020c:	d000      	beq.n	8000210 <__divsi3+0x10c>
 800020e:	4249      	negs	r1, r1
 8000210:	1003      	asrs	r3, r0, #32
 8000212:	d300      	bcc.n	8000216 <__divsi3+0x112>
 8000214:	4240      	negs	r0, r0
 8000216:	4053      	eors	r3, r2
 8000218:	2200      	movs	r2, #0
 800021a:	469c      	mov	ip, r3
 800021c:	0903      	lsrs	r3, r0, #4
 800021e:	428b      	cmp	r3, r1
 8000220:	d32d      	bcc.n	800027e <__divsi3+0x17a>
 8000222:	0a03      	lsrs	r3, r0, #8
 8000224:	428b      	cmp	r3, r1
 8000226:	d312      	bcc.n	800024e <__divsi3+0x14a>
 8000228:	22fc      	movs	r2, #252	; 0xfc
 800022a:	0189      	lsls	r1, r1, #6
 800022c:	ba12      	rev	r2, r2
 800022e:	0a03      	lsrs	r3, r0, #8
 8000230:	428b      	cmp	r3, r1
 8000232:	d30c      	bcc.n	800024e <__divsi3+0x14a>
 8000234:	0189      	lsls	r1, r1, #6
 8000236:	1192      	asrs	r2, r2, #6
 8000238:	428b      	cmp	r3, r1
 800023a:	d308      	bcc.n	800024e <__divsi3+0x14a>
 800023c:	0189      	lsls	r1, r1, #6
 800023e:	1192      	asrs	r2, r2, #6
 8000240:	428b      	cmp	r3, r1
 8000242:	d304      	bcc.n	800024e <__divsi3+0x14a>
 8000244:	0189      	lsls	r1, r1, #6
 8000246:	d03a      	beq.n	80002be <__divsi3+0x1ba>
 8000248:	1192      	asrs	r2, r2, #6
 800024a:	e000      	b.n	800024e <__divsi3+0x14a>
 800024c:	0989      	lsrs	r1, r1, #6
 800024e:	09c3      	lsrs	r3, r0, #7
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__divsi3+0x154>
 8000254:	01cb      	lsls	r3, r1, #7
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0983      	lsrs	r3, r0, #6
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x160>
 8000260:	018b      	lsls	r3, r1, #6
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0943      	lsrs	r3, r0, #5
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x16c>
 800026c:	014b      	lsls	r3, r1, #5
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x178>
 8000278:	010b      	lsls	r3, r1, #4
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	08c3      	lsrs	r3, r0, #3
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x184>
 8000284:	00cb      	lsls	r3, r1, #3
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0883      	lsrs	r3, r0, #2
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x190>
 8000290:	008b      	lsls	r3, r1, #2
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	d2d9      	bcs.n	800024c <__divsi3+0x148>
 8000298:	0843      	lsrs	r3, r0, #1
 800029a:	428b      	cmp	r3, r1
 800029c:	d301      	bcc.n	80002a2 <__divsi3+0x19e>
 800029e:	004b      	lsls	r3, r1, #1
 80002a0:	1ac0      	subs	r0, r0, r3
 80002a2:	4152      	adcs	r2, r2
 80002a4:	1a41      	subs	r1, r0, r1
 80002a6:	d200      	bcs.n	80002aa <__divsi3+0x1a6>
 80002a8:	4601      	mov	r1, r0
 80002aa:	4663      	mov	r3, ip
 80002ac:	4152      	adcs	r2, r2
 80002ae:	105b      	asrs	r3, r3, #1
 80002b0:	4610      	mov	r0, r2
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x1b4>
 80002b4:	4240      	negs	r0, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d500      	bpl.n	80002bc <__divsi3+0x1b8>
 80002ba:	4249      	negs	r1, r1
 80002bc:	4770      	bx	lr
 80002be:	4663      	mov	r3, ip
 80002c0:	105b      	asrs	r3, r3, #1
 80002c2:	d300      	bcc.n	80002c6 <__divsi3+0x1c2>
 80002c4:	4240      	negs	r0, r0
 80002c6:	b501      	push	{r0, lr}
 80002c8:	2000      	movs	r0, #0
 80002ca:	f000 f805 	bl	80002d8 <__aeabi_idiv0>
 80002ce:	bd02      	pop	{r1, pc}

080002d0 <__aeabi_idivmod>:
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d0f8      	beq.n	80002c6 <__divsi3+0x1c2>
 80002d4:	e716      	b.n	8000104 <__divsi3>
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_idiv0>:
 80002d8:	4770      	bx	lr
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <init_ADC>:

#include "ADC.h"



void init_ADC(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0

	RCC->IOPENR |= (1U << 0);
 80002e2:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <init_ADC+0xcc>)
 80002e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <init_ADC+0xcc>)
 80002e8:	2101      	movs	r1, #1
 80002ea:	430a      	orrs	r2, r1
 80002ec:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR2 |= (1U << 20);// enable ADC clock
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <init_ADC+0xcc>)
 80002f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <init_ADC+0xcc>)
 80002f4:	2180      	movs	r1, #128	; 0x80
 80002f6:	0349      	lsls	r1, r1, #13
 80002f8:	430a      	orrs	r2, r1
 80002fa:	641a      	str	r2, [r3, #64]	; 0x40

	//setup PA5 as analog
	GPIOA->MODER &= ~(3U << 2*5);
 80002fc:	23a0      	movs	r3, #160	; 0xa0
 80002fe:	05db      	lsls	r3, r3, #23
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	23a0      	movs	r3, #160	; 0xa0
 8000304:	05db      	lsls	r3, r3, #23
 8000306:	4929      	ldr	r1, [pc, #164]	; (80003ac <init_ADC+0xd0>)
 8000308:	400a      	ands	r2, r1
 800030a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (3U << 2*5);
 800030c:	23a0      	movs	r3, #160	; 0xa0
 800030e:	05db      	lsls	r3, r3, #23
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	23a0      	movs	r3, #160	; 0xa0
 8000314:	05db      	lsls	r3, r3, #23
 8000316:	21c0      	movs	r1, #192	; 0xc0
 8000318:	0109      	lsls	r1, r1, #4
 800031a:	430a      	orrs	r2, r1
 800031c:	601a      	str	r2, [r3, #0]

	ADC1->CR |= (1U << 28); //ADC voltage regulator enabled
 800031e:	4b24      	ldr	r3, [pc, #144]	; (80003b0 <init_ADC+0xd4>)
 8000320:	689a      	ldr	r2, [r3, #8]
 8000322:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <init_ADC+0xd4>)
 8000324:	2180      	movs	r1, #128	; 0x80
 8000326:	0549      	lsls	r1, r1, #21
 8000328:	430a      	orrs	r2, r1
 800032a:	609a      	str	r2, [r3, #8]

	for(uint32_t i=0; i> 0xFFFF; i++);
 800032c:	2300      	movs	r3, #0
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	e002      	b.n	8000338 <init_ADC+0x5c>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3301      	adds	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a1e      	ldr	r2, [pc, #120]	; (80003b4 <init_ADC+0xd8>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d8f8      	bhi.n	8000332 <init_ADC+0x56>

	ADC1->CR |= (1U << 31);//ADC calibration enabled
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <init_ADC+0xd4>)
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <init_ADC+0xd4>)
 8000346:	2180      	movs	r1, #128	; 0x80
 8000348:	0609      	lsls	r1, r1, #24
 800034a:	430a      	orrs	r2, r1
 800034c:	609a      	str	r2, [r3, #8]

	while(0 != (ADC1->CR & (1U << 31)));//wait until completion
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <init_ADC+0xd4>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	2b00      	cmp	r3, #0
 8000356:	dbfb      	blt.n	8000350 <init_ADC+0x74>

	//ADC1->IER |= (1U << 11);//1: End of calibration interrupt enabled
	ADC1->IER |= (1U << 2);//End of conversion interrupt enable
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <init_ADC+0xd4>)
 800035a:	685a      	ldr	r2, [r3, #4]
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <init_ADC+0xd4>)
 800035e:	2104      	movs	r1, #4
 8000360:	430a      	orrs	r2, r1
 8000362:	605a      	str	r2, [r3, #4]

	ADC1->CFGR1 |= (2U << 3);// 10: 8 bits
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <init_ADC+0xd4>)
 8000366:	68da      	ldr	r2, [r3, #12]
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <init_ADC+0xd4>)
 800036a:	2110      	movs	r1, #16
 800036c:	430a      	orrs	r2, r1
 800036e:	60da      	str	r2, [r3, #12]

	ADC1->SMPR |= (7U << 0);//Sampling time selection 111 as 1: 160.5 ADC clock cycles
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <init_ADC+0xd4>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <init_ADC+0xd4>)
 8000376:	2107      	movs	r1, #7
 8000378:	430a      	orrs	r2, r1
 800037a:	615a      	str	r2, [r3, #20]

	ADC1->CHSELR |= (1U << 5);//1: Input Channel-5 is selected for conversion
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <init_ADC+0xd4>)
 800037e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <init_ADC+0xd4>)
 8000382:	2120      	movs	r1, #32
 8000384:	430a      	orrs	r2, r1
 8000386:	629a      	str	r2, [r3, #40]	; 0x28

	ADC1->CR |= (1U << 0); //ADC enable command
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <init_ADC+0xd4>)
 800038a:	689a      	ldr	r2, [r3, #8]
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <init_ADC+0xd4>)
 800038e:	2101      	movs	r1, #1
 8000390:	430a      	orrs	r2, r1
 8000392:	609a      	str	r2, [r3, #8]

	while(0 == (ADC1->ISR & (1U << 0)));// 1: ADC is ready to start conversion
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <init_ADC+0xd4>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2201      	movs	r2, #1
 800039c:	4013      	ands	r3, r2
 800039e:	d0fa      	beq.n	8000396 <init_ADC+0xba>


}
 80003a0:	46c0      	nop			; (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b002      	add	sp, #8
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40021000 	.word	0x40021000
 80003ac:	fffff3ff 	.word	0xfffff3ff
 80003b0:	40012400 	.word	0x40012400
 80003b4:	0000ffff 	.word	0x0000ffff

080003b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	0002      	movs	r2, r0
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b7f      	cmp	r3, #127	; 0x7f
 80003ca:	d809      	bhi.n	80003e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	001a      	movs	r2, r3
 80003d2:	231f      	movs	r3, #31
 80003d4:	401a      	ands	r2, r3
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <__NVIC_EnableIRQ+0x30>)
 80003d8:	2101      	movs	r1, #1
 80003da:	4091      	lsls	r1, r2
 80003dc:	000a      	movs	r2, r1
 80003de:	601a      	str	r2, [r3, #0]
  }
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b002      	add	sp, #8
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	e000e100 	.word	0xe000e100

080003ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	0002      	movs	r2, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	1dfb      	adds	r3, r7, #7
 80003f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80003fa:	1dfb      	adds	r3, r7, #7
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b7f      	cmp	r3, #127	; 0x7f
 8000400:	d828      	bhi.n	8000454 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000402:	4a2f      	ldr	r2, [pc, #188]	; (80004c0 <__NVIC_SetPriority+0xd4>)
 8000404:	1dfb      	adds	r3, r7, #7
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	b25b      	sxtb	r3, r3
 800040a:	089b      	lsrs	r3, r3, #2
 800040c:	33c0      	adds	r3, #192	; 0xc0
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	589b      	ldr	r3, [r3, r2]
 8000412:	1dfa      	adds	r2, r7, #7
 8000414:	7812      	ldrb	r2, [r2, #0]
 8000416:	0011      	movs	r1, r2
 8000418:	2203      	movs	r2, #3
 800041a:	400a      	ands	r2, r1
 800041c:	00d2      	lsls	r2, r2, #3
 800041e:	21ff      	movs	r1, #255	; 0xff
 8000420:	4091      	lsls	r1, r2
 8000422:	000a      	movs	r2, r1
 8000424:	43d2      	mvns	r2, r2
 8000426:	401a      	ands	r2, r3
 8000428:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	019b      	lsls	r3, r3, #6
 800042e:	22ff      	movs	r2, #255	; 0xff
 8000430:	401a      	ands	r2, r3
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	0018      	movs	r0, r3
 8000438:	2303      	movs	r3, #3
 800043a:	4003      	ands	r3, r0
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000440:	481f      	ldr	r0, [pc, #124]	; (80004c0 <__NVIC_SetPriority+0xd4>)
 8000442:	1dfb      	adds	r3, r7, #7
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	b25b      	sxtb	r3, r3
 8000448:	089b      	lsrs	r3, r3, #2
 800044a:	430a      	orrs	r2, r1
 800044c:	33c0      	adds	r3, #192	; 0xc0
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000452:	e031      	b.n	80004b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000454:	4a1b      	ldr	r2, [pc, #108]	; (80004c4 <__NVIC_SetPriority+0xd8>)
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	0019      	movs	r1, r3
 800045c:	230f      	movs	r3, #15
 800045e:	400b      	ands	r3, r1
 8000460:	3b08      	subs	r3, #8
 8000462:	089b      	lsrs	r3, r3, #2
 8000464:	3306      	adds	r3, #6
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	18d3      	adds	r3, r2, r3
 800046a:	3304      	adds	r3, #4
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	1dfa      	adds	r2, r7, #7
 8000470:	7812      	ldrb	r2, [r2, #0]
 8000472:	0011      	movs	r1, r2
 8000474:	2203      	movs	r2, #3
 8000476:	400a      	ands	r2, r1
 8000478:	00d2      	lsls	r2, r2, #3
 800047a:	21ff      	movs	r1, #255	; 0xff
 800047c:	4091      	lsls	r1, r2
 800047e:	000a      	movs	r2, r1
 8000480:	43d2      	mvns	r2, r2
 8000482:	401a      	ands	r2, r3
 8000484:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	019b      	lsls	r3, r3, #6
 800048a:	22ff      	movs	r2, #255	; 0xff
 800048c:	401a      	ands	r2, r3
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	0018      	movs	r0, r3
 8000494:	2303      	movs	r3, #3
 8000496:	4003      	ands	r3, r0
 8000498:	00db      	lsls	r3, r3, #3
 800049a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <__NVIC_SetPriority+0xd8>)
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	001c      	movs	r4, r3
 80004a4:	230f      	movs	r3, #15
 80004a6:	4023      	ands	r3, r4
 80004a8:	3b08      	subs	r3, #8
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	430a      	orrs	r2, r1
 80004ae:	3306      	adds	r3, #6
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	18c3      	adds	r3, r0, r3
 80004b4:	3304      	adds	r3, #4
 80004b6:	601a      	str	r2, [r3, #0]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b003      	add	sp, #12
 80004be:	bd90      	pop	{r4, r7, pc}
 80004c0:	e000e100 	.word	0xe000e100
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <BSP_init>:
#include "stdlib.h"

uint32_t k=0;
int sayac;

void BSP_init(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004cc:	b672      	cpsid	i

	__disable_irq();

//		SSD_init();
		init_ADC();
 80004ce:	f7ff ff05 	bl	80002dc <init_ADC>
		TIM1_init();
 80004d2:	f000 f80d 	bl	80004f0 <TIM1_init>
		TIM3_init();
 80004d6:	f000 f851 	bl	800057c <TIM3_init>
		I2C_init_();
 80004da:	f000 fa11 	bl	8000900 <I2C_init_>
		sayac = 0;
 80004de:	4b03      	ldr	r3, [pc, #12]	; (80004ec <BSP_init+0x24>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004e4:	b662      	cpsie	i
	__enable_irq();


}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000fc 	.word	0x200000fc

080004f0 <TIM1_init>:


void TIM1_init(){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

	RCC->APBENR2 |= (1U<< 11);// enable time1 module clock
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <TIM1_init+0x64>)
 80004f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <TIM1_init+0x64>)
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0109      	lsls	r1, r1, #4
 80004fe:	430a      	orrs	r2, r1
 8000500:	641a      	str	r2, [r3, #64]	; 0x40

	TIM1->CR1=0;// zero out the control register just in case
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <TIM1_init+0x68>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
	TIM1->CR1 |= (1<<7);	// ARPE
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <TIM1_init+0x68>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <TIM1_init+0x68>)
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	430a      	orrs	r2, r1
 8000512:	601a      	str	r2, [r3, #0]
	TIM1->CNT=0;// zero out sayac
 8000514:	4b10      	ldr	r3, [pc, #64]	; (8000558 <TIM1_init+0x68>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	; 0x24

	/*0.1 ms interrupt	 */

	TIM1->PSC=10;
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <TIM1_init+0x68>)
 800051c:	220a      	movs	r2, #10
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR=160;
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <TIM1_init+0x68>)
 8000522:	22a0      	movs	r2, #160	; 0xa0
 8000524:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->DIER |= (1 << 0);// update interrupt enable
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <TIM1_init+0x68>)
 8000528:	68da      	ldr	r2, [r3, #12]
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <TIM1_init+0x68>)
 800052c:	2101      	movs	r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	60da      	str	r2, [r3, #12]
	TIM1->CR1 |= (1 << 0);// 	tım1 enable
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <TIM1_init+0x68>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <TIM1_init+0x68>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 3);
 800053e:	2103      	movs	r1, #3
 8000540:	200d      	movs	r0, #13
 8000542:	f7ff ff53 	bl	80003ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000546:	200d      	movs	r0, #13
 8000548:	f7ff ff36 	bl	80003b8 <__NVIC_EnableIRQ>

}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40021000 	.word	0x40021000
 8000558:	40012c00 	.word	0x40012c00

0800055c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

	display_SSD();
 8000560:	f000 fafc 	bl	8000b5c <display_SSD>

	TIM1->SR &= ~(1U<<0); //clear update status register
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1c>)
 8000566:	691a      	ldr	r2, [r3, #16]
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1c>)
 800056a:	2101      	movs	r1, #1
 800056c:	438a      	bics	r2, r1
 800056e:	611a      	str	r2, [r3, #16]

}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40012c00 	.word	0x40012c00

0800057c <TIM3_init>:

void TIM3_init(void){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

	RCC->IOPENR |= 7; /*??????????????????*/
 8000580:	4b3b      	ldr	r3, [pc, #236]	; (8000670 <TIM3_init+0xf4>)
 8000582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000584:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <TIM3_init+0xf4>)
 8000586:	2107      	movs	r1, #7
 8000588:	430a      	orrs	r2, r1
 800058a:	635a      	str	r2, [r3, #52]	; 0x34

	//setup PA6 as AF2
	GPIOA->MODER &= ~(3U << 2*6);
 800058c:	23a0      	movs	r3, #160	; 0xa0
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	4937      	ldr	r1, [pc, #220]	; (8000674 <TIM3_init+0xf8>)
 8000598:	400a      	ands	r2, r1
 800059a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2U << 2*6);
 800059c:	23a0      	movs	r3, #160	; 0xa0
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	23a0      	movs	r3, #160	; 0xa0
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	0189      	lsls	r1, r1, #6
 80005aa:	430a      	orrs	r2, r1
 80005ac:	601a      	str	r2, [r3, #0]

	// choose AF2 from mux
	GPIOA->AFR[0] &= ~(0xFU << 4*6);
 80005ae:	23a0      	movs	r3, #160	; 0xa0
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	6a1a      	ldr	r2, [r3, #32]
 80005b4:	23a0      	movs	r3, #160	; 0xa0
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	492f      	ldr	r1, [pc, #188]	; (8000678 <TIM3_init+0xfc>)
 80005ba:	400a      	ands	r2, r1
 80005bc:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1U << 4*6);
 80005be:	23a0      	movs	r3, #160	; 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	6a1a      	ldr	r2, [r3, #32]
 80005c4:	23a0      	movs	r3, #160	; 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0449      	lsls	r1, r1, #17
 80005cc:	430a      	orrs	r2, r1
 80005ce:	621a      	str	r2, [r3, #32]

	////////////////
	RCC->APBENR1 |= (1U<< 1);// enable timer3 clock
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <TIM3_init+0xf4>)
 80005d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005d4:	4b26      	ldr	r3, [pc, #152]	; (8000670 <TIM3_init+0xf4>)
 80005d6:	2102      	movs	r1, #2
 80005d8:	430a      	orrs	r2, r1
 80005da:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM3->CR1=0;// zero out the control register just in case
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <TIM3_init+0x100>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
	TIM3->CR1 |= (1U << 7);	// ARPE
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <TIM3_init+0x100>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <TIM3_init+0x100>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	430a      	orrs	r2, r1
 80005ec:	601a      	str	r2, [r3, #0]
	TIM3->CNT=0;// zero out sayac
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <TIM3_init+0x100>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	625a      	str	r2, [r3, #36]	; 0x24

	//100us -> 0.10ms
	TIM3->PSC = 1;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <TIM3_init+0x100>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 255;
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <TIM3_init+0x100>)
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->DIER |= (1 << 0);// update interrupt enable
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <TIM3_init+0x100>)
 8000602:	68da      	ldr	r2, [r3, #12]
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <TIM3_init+0x100>)
 8000606:	2101      	movs	r1, #1
 8000608:	430a      	orrs	r2, r1
 800060a:	60da      	str	r2, [r3, #12]

	/////////////

	//PWM FOR PA6 TIM3_CH1
	TIM3->CCMR1 |=(1 << 3); // output compare preload enable
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <TIM3_init+0x100>)
 800060e:	699a      	ldr	r2, [r3, #24]
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <TIM3_init+0x100>)
 8000612:	2108      	movs	r1, #8
 8000614:	430a      	orrs	r2, r1
 8000616:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 &= ~(1U << 16); //0
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <TIM3_init+0x100>)
 800061a:	699a      	ldr	r2, [r3, #24]
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <TIM3_init+0x100>)
 800061e:	4918      	ldr	r1, [pc, #96]	; (8000680 <TIM3_init+0x104>)
 8000620:	400a      	ands	r2, r1
 8000622:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 &= ~(0xFU << 4);
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <TIM3_init+0x100>)
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <TIM3_init+0x100>)
 800062a:	21f0      	movs	r1, #240	; 0xf0
 800062c:	438a      	bics	r2, r1
 800062e:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= (0x6U << 4); // mode 1 enable
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <TIM3_init+0x100>)
 8000632:	699a      	ldr	r2, [r3, #24]
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <TIM3_init+0x100>)
 8000636:	2160      	movs	r1, #96	; 0x60
 8000638:	430a      	orrs	r2, r1
 800063a:	619a      	str	r2, [r3, #24]
	TIM3->CCER |= (1U << 0);
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <TIM3_init+0x100>)
 800063e:	6a1a      	ldr	r2, [r3, #32]
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <TIM3_init+0x100>)
 8000642:	2101      	movs	r1, #1
 8000644:	430a      	orrs	r2, r1
 8000646:	621a      	str	r2, [r3, #32]

	TIM3->CCR1 = 8;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <TIM3_init+0x100>)
 800064a:	2208      	movs	r2, #8
 800064c:	635a      	str	r2, [r3, #52]	; 0x34

	TIM3->CR1 |= (1 << 0);// 	tim3 enable
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <TIM3_init+0x100>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <TIM3_init+0x100>)
 8000654:	2101      	movs	r1, #1
 8000656:	430a      	orrs	r2, r1
 8000658:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(TIM3_IRQn, 2);
 800065a:	2102      	movs	r1, #2
 800065c:	2010      	movs	r0, #16
 800065e:	f7ff fec5 	bl	80003ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 8000662:	2010      	movs	r0, #16
 8000664:	f7ff fea8 	bl	80003b8 <__NVIC_EnableIRQ>

}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	40021000 	.word	0x40021000
 8000674:	ffffcfff 	.word	0xffffcfff
 8000678:	f0ffffff 	.word	0xf0ffffff
 800067c:	40000400 	.word	0x40000400
 8000680:	fffeffff 	.word	0xfffeffff

08000684 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

	TIM3->SR &= ~(1U << 0); //clear update status register
 800068a:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <TIM3_IRQHandler+0xfc>)
 800068c:	691a      	ldr	r2, [r3, #16]
 800068e:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <TIM3_IRQHandler+0xfc>)
 8000690:	2101      	movs	r1, #1
 8000692:	438a      	bics	r2, r1
 8000694:	611a      	str	r2, [r3, #16]

	ADC1->CR |= (1U << 2);//Bit 2 ADSTART: ADC start conversion command
 8000696:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <TIM3_IRQHandler+0x100>)
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <TIM3_IRQHandler+0x100>)
 800069c:	2104      	movs	r1, #4
 800069e:	430a      	orrs	r2, r1
 80006a0:	609a      	str	r2, [r3, #8]

	while(0 == (ADC1->ISR & (1U << 2)));
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <TIM3_IRQHandler+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2204      	movs	r2, #4
 80006aa:	4013      	ands	r3, r2
 80006ac:	d0fa      	beq.n	80006a4 <TIM3_IRQHandler+0x20>


	uint8_t transporter;
	if(sayac == 10000){
 80006ae:	4b36      	ldr	r3, [pc, #216]	; (8000788 <TIM3_IRQHandler+0x104>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a36      	ldr	r2, [pc, #216]	; (800078c <TIM3_IRQHandler+0x108>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d105      	bne.n	80006c4 <TIM3_IRQHandler+0x40>
		k = 1;
 80006b8:	4b35      	ldr	r3, [pc, #212]	; (8000790 <TIM3_IRQHandler+0x10c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
		sayac = 0;
 80006be:	4b32      	ldr	r3, [pc, #200]	; (8000788 <TIM3_IRQHandler+0x104>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
	}
	switch(k){
 80006c4:	4b32      	ldr	r3, [pc, #200]	; (8000790 <TIM3_IRQHandler+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d038      	beq.n	800073e <TIM3_IRQHandler+0xba>
 80006cc:	d24e      	bcs.n	800076c <TIM3_IRQHandler+0xe8>
	case 0:
		//ADC
		if(sayac < 10000){
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <TIM3_IRQHandler+0x104>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a30      	ldr	r2, [pc, #192]	; (8000794 <TIM3_IRQHandler+0x110>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	dc4b      	bgt.n	8000770 <TIM3_IRQHandler+0xec>
			transporter = (uint8_t)ADC1->DR;
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <TIM3_IRQHandler+0x100>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	1cfb      	adds	r3, r7, #3
 80006e0:	701a      	strb	r2, [r3, #0]

				transporter = (uint8_t)((transporter-127)*2);
 80006e2:	1cfb      	adds	r3, r7, #3
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	18db      	adds	r3, r3, r3
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	1cfb      	adds	r3, r7, #3
 80006f0:	701a      	strb	r2, [r3, #0]
				soundfunc(transporter, sound_buffer);
 80006f2:	1cfb      	adds	r3, r7, #3
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	4a28      	ldr	r2, [pc, #160]	; (8000798 <TIM3_IRQHandler+0x114>)
 80006f8:	0011      	movs	r1, r2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 f850 	bl	80007a0 <soundfunc>

			if(!(sayac % 100)){
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <TIM3_IRQHandler+0x104>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2164      	movs	r1, #100	; 0x64
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff fde2 	bl	80002d0 <__aeabi_idivmod>
 800070c:	1e0b      	subs	r3, r1, #0
 800070e:	d110      	bne.n	8000732 <TIM3_IRQHandler+0xae>
				write_ee((uint16_t)sayac, sound_buffer, 100);
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <TIM3_IRQHandler+0x104>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	b29b      	uxth	r3, r3
 8000716:	4920      	ldr	r1, [pc, #128]	; (8000798 <TIM3_IRQHandler+0x114>)
 8000718:	2264      	movs	r2, #100	; 0x64
 800071a:	0018      	movs	r0, r3
 800071c:	f001 f80e 	bl	800173c <write_ee>
			    for(int i = 0xFFFF; i>0; i--);
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <TIM3_IRQHandler+0x118>)
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	e002      	b.n	800072c <TIM3_IRQHandler+0xa8>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3b01      	subs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	dcf9      	bgt.n	8000726 <TIM3_IRQHandler+0xa2>
			}
			sayac++;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <TIM3_IRQHandler+0x104>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <TIM3_IRQHandler+0x104>)
 800073a:	601a      	str	r2, [r3, #0]
		}
		break;
 800073c:	e018      	b.n	8000770 <TIM3_IRQHandler+0xec>
	case 1:
		//PWM
		if(sayac<10000){
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <TIM3_IRQHandler+0x104>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <TIM3_IRQHandler+0x110>)
 8000744:	4293      	cmp	r3, r2
 8000746:	dc15      	bgt.n	8000774 <TIM3_IRQHandler+0xf0>

				read_ee((uint16_t)sayac, &transporter, 1);
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <TIM3_IRQHandler+0x104>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	b29b      	uxth	r3, r3
 800074e:	1cf9      	adds	r1, r7, #3
 8000750:	2201      	movs	r2, #1
 8000752:	0018      	movs	r0, r3
 8000754:	f000 ffc4 	bl	80016e0 <read_ee>

				TIM3->CCR1 = (uint32_t)(transporter);
 8000758:	1cfb      	adds	r3, r7, #3
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <TIM3_IRQHandler+0xfc>)
 800075e:	635a      	str	r2, [r3, #52]	; 0x34


			sayac++;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <TIM3_IRQHandler+0x104>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <TIM3_IRQHandler+0x104>)
 8000768:	601a      	str	r2, [r3, #0]
		}
		break;
 800076a:	e003      	b.n	8000774 <TIM3_IRQHandler+0xf0>
	case 3:
		//idle();
		break;
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	e002      	b.n	8000776 <TIM3_IRQHandler+0xf2>
		break;
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	e000      	b.n	8000776 <TIM3_IRQHandler+0xf2>
		break;
 8000774:	46c0      	nop			; (mov r8, r8)

	}


}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40000400 	.word	0x40000400
 8000784:	40012400 	.word	0x40012400
 8000788:	200000fc 	.word	0x200000fc
 800078c:	00002710 	.word	0x00002710
 8000790:	20000080 	.word	0x20000080
 8000794:	0000270f 	.word	0x0000270f
 8000798:	20000098 	.word	0x20000098
 800079c:	0000ffff 	.word	0x0000ffff

080007a0 <soundfunc>:


void soundfunc(uint8_t a, uint8_t *ARR){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	0002      	movs	r2, r0
 80007a8:	6039      	str	r1, [r7, #0]
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	701a      	strb	r2, [r3, #0]
	static int i = 0;

		if (i<100){
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <soundfunc+0x40>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b63      	cmp	r3, #99	; 0x63
 80007b4:	dc0d      	bgt.n	80007d2 <soundfunc+0x32>
			ARR[i] = a;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <soundfunc+0x40>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	001a      	movs	r2, r3
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	189b      	adds	r3, r3, r2
 80007c0:	1dfa      	adds	r2, r7, #7
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	701a      	strb	r2, [r3, #0]
			i++;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <soundfunc+0x40>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <soundfunc+0x40>)
 80007ce:	601a      	str	r2, [r3, #0]
		i = 0;
		}



}
 80007d0:	e002      	b.n	80007d8 <soundfunc+0x38>
		i = 0;
 80007d2:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <soundfunc+0x40>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000084 	.word	0x20000084

080007e4 <__NVIC_EnableIRQ>:
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b7f      	cmp	r3, #127	; 0x7f
 80007f6:	d809      	bhi.n	800080c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	001a      	movs	r2, r3
 80007fe:	231f      	movs	r3, #31
 8000800:	401a      	ands	r2, r3
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <__NVIC_EnableIRQ+0x30>)
 8000804:	2101      	movs	r1, #1
 8000806:	4091      	lsls	r1, r2
 8000808:	000a      	movs	r2, r1
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bd80      	pop	{r7, pc}
 8000814:	e000e100 	.word	0xe000e100

08000818 <__NVIC_SetPriority>:
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	0002      	movs	r2, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b7f      	cmp	r3, #127	; 0x7f
 800082c:	d828      	bhi.n	8000880 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082e:	4a2f      	ldr	r2, [pc, #188]	; (80008ec <__NVIC_SetPriority+0xd4>)
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b25b      	sxtb	r3, r3
 8000836:	089b      	lsrs	r3, r3, #2
 8000838:	33c0      	adds	r3, #192	; 0xc0
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	589b      	ldr	r3, [r3, r2]
 800083e:	1dfa      	adds	r2, r7, #7
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	0011      	movs	r1, r2
 8000844:	2203      	movs	r2, #3
 8000846:	400a      	ands	r2, r1
 8000848:	00d2      	lsls	r2, r2, #3
 800084a:	21ff      	movs	r1, #255	; 0xff
 800084c:	4091      	lsls	r1, r2
 800084e:	000a      	movs	r2, r1
 8000850:	43d2      	mvns	r2, r2
 8000852:	401a      	ands	r2, r3
 8000854:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	019b      	lsls	r3, r3, #6
 800085a:	22ff      	movs	r2, #255	; 0xff
 800085c:	401a      	ands	r2, r3
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	0018      	movs	r0, r3
 8000864:	2303      	movs	r3, #3
 8000866:	4003      	ands	r3, r0
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086c:	481f      	ldr	r0, [pc, #124]	; (80008ec <__NVIC_SetPriority+0xd4>)
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b25b      	sxtb	r3, r3
 8000874:	089b      	lsrs	r3, r3, #2
 8000876:	430a      	orrs	r2, r1
 8000878:	33c0      	adds	r3, #192	; 0xc0
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	501a      	str	r2, [r3, r0]
}
 800087e:	e031      	b.n	80008e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <__NVIC_SetPriority+0xd8>)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	0019      	movs	r1, r3
 8000888:	230f      	movs	r3, #15
 800088a:	400b      	ands	r3, r1
 800088c:	3b08      	subs	r3, #8
 800088e:	089b      	lsrs	r3, r3, #2
 8000890:	3306      	adds	r3, #6
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	18d3      	adds	r3, r2, r3
 8000896:	3304      	adds	r3, #4
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	1dfa      	adds	r2, r7, #7
 800089c:	7812      	ldrb	r2, [r2, #0]
 800089e:	0011      	movs	r1, r2
 80008a0:	2203      	movs	r2, #3
 80008a2:	400a      	ands	r2, r1
 80008a4:	00d2      	lsls	r2, r2, #3
 80008a6:	21ff      	movs	r1, #255	; 0xff
 80008a8:	4091      	lsls	r1, r2
 80008aa:	000a      	movs	r2, r1
 80008ac:	43d2      	mvns	r2, r2
 80008ae:	401a      	ands	r2, r3
 80008b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	019b      	lsls	r3, r3, #6
 80008b6:	22ff      	movs	r2, #255	; 0xff
 80008b8:	401a      	ands	r2, r3
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	0018      	movs	r0, r3
 80008c0:	2303      	movs	r3, #3
 80008c2:	4003      	ands	r3, r0
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c8:	4809      	ldr	r0, [pc, #36]	; (80008f0 <__NVIC_SetPriority+0xd8>)
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	001c      	movs	r4, r3
 80008d0:	230f      	movs	r3, #15
 80008d2:	4023      	ands	r3, r4
 80008d4:	3b08      	subs	r3, #8
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	430a      	orrs	r2, r1
 80008da:	3306      	adds	r3, #6
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	18c3      	adds	r3, r0, r3
 80008e0:	3304      	adds	r3, #4
 80008e2:	601a      	str	r2, [r3, #0]
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b003      	add	sp, #12
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <I2C1_IRQHandler>:
 */

#include "I2C.h"


void I2C1_IRQHandler(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <I2C_init_>:


void I2C_init_(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

	//Enable GPIOB
	RCC->IOPENR |= (1U << 1);
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <I2C_init_+0x104>)
 8000906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000908:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <I2C_init_+0x104>)
 800090a:	2102      	movs	r1, #2
 800090c:	430a      	orrs	r2, r1
 800090e:	635a      	str	r2, [r3, #52]	; 0x34

	//SCL
	//setup PB8 as AF6
	GPIOB->MODER &= ~(3U << 2*8);
 8000910:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <I2C_init_+0x108>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b3c      	ldr	r3, [pc, #240]	; (8000a08 <I2C_init_+0x108>)
 8000916:	493d      	ldr	r1, [pc, #244]	; (8000a0c <I2C_init_+0x10c>)
 8000918:	400a      	ands	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (2 << 2*8);
 800091c:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <I2C_init_+0x108>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <I2C_init_+0x108>)
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	0289      	lsls	r1, r1, #10
 8000926:	430a      	orrs	r2, r1
 8000928:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER |= (1U << 8);
 800092a:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <I2C_init_+0x108>)
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <I2C_init_+0x108>)
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	0049      	lsls	r1, r1, #1
 8000934:	430a      	orrs	r2, r1
 8000936:	605a      	str	r2, [r3, #4]

	//choose AF from mux
	GPIOB->AFR[1] &=  ~(0xFU << 4*0);
 8000938:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <I2C_init_+0x108>)
 800093a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800093c:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <I2C_init_+0x108>)
 800093e:	210f      	movs	r1, #15
 8000940:	438a      	bics	r2, r1
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB->AFR[1] |=  (6 << 4*0);
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <I2C_init_+0x108>)
 8000946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000948:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <I2C_init_+0x108>)
 800094a:	2106      	movs	r1, #6
 800094c:	430a      	orrs	r2, r1
 800094e:	625a      	str	r2, [r3, #36]	; 0x24

	//SDA
	//setup PB9 as AF6
	GPIOB->MODER &= ~(3U << 2*9);
 8000950:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <I2C_init_+0x108>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <I2C_init_+0x108>)
 8000956:	492e      	ldr	r1, [pc, #184]	; (8000a10 <I2C_init_+0x110>)
 8000958:	400a      	ands	r2, r1
 800095a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (2 << 2*9);
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <I2C_init_+0x108>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <I2C_init_+0x108>)
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	0309      	lsls	r1, r1, #12
 8000966:	430a      	orrs	r2, r1
 8000968:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER |= (1U << 9);
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <I2C_init_+0x108>)
 800096c:	685a      	ldr	r2, [r3, #4]
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <I2C_init_+0x108>)
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	0089      	lsls	r1, r1, #2
 8000974:	430a      	orrs	r2, r1
 8000976:	605a      	str	r2, [r3, #4]

	//choose AF from mux
	GPIOB->AFR[1] &=  ~(0xFU << 4*1);
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <I2C_init_+0x108>)
 800097a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <I2C_init_+0x108>)
 800097e:	21f0      	movs	r1, #240	; 0xf0
 8000980:	438a      	bics	r2, r1
 8000982:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOB->AFR[1] |=  (6 << 4*1);
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <I2C_init_+0x108>)
 8000986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <I2C_init_+0x108>)
 800098a:	2160      	movs	r1, #96	; 0x60
 800098c:	430a      	orrs	r2, r1
 800098e:	625a      	str	r2, [r3, #36]	; 0x24

	//enable I2C1
	RCC->APBENR1 |= (1U << 21);
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <I2C_init_+0x104>)
 8000992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <I2C_init_+0x104>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	0389      	lsls	r1, r1, #14
 800099a:	430a      	orrs	r2, r1
 800099c:	63da      	str	r2, [r3, #60]	; 0x3c



	I2C1->TIMINGR |= (3 << 28); //PRESC
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <I2C_init_+0x114>)
 80009a0:	691a      	ldr	r2, [r3, #16]
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <I2C_init_+0x114>)
 80009a4:	21c0      	movs	r1, #192	; 0xc0
 80009a6:	0589      	lsls	r1, r1, #22
 80009a8:	430a      	orrs	r2, r1
 80009aa:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0x13 << 0); //SCLL
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <I2C_init_+0x114>)
 80009ae:	691a      	ldr	r2, [r3, #16]
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <I2C_init_+0x114>)
 80009b2:	2113      	movs	r1, #19
 80009b4:	430a      	orrs	r2, r1
 80009b6:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0xF << 8); //SCLH
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <I2C_init_+0x114>)
 80009ba:	691a      	ldr	r2, [r3, #16]
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <I2C_init_+0x114>)
 80009be:	21f0      	movs	r1, #240	; 0xf0
 80009c0:	0109      	lsls	r1, r1, #4
 80009c2:	430a      	orrs	r2, r1
 80009c4:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0x2 << 16); //SDADEL
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <I2C_init_+0x114>)
 80009c8:	691a      	ldr	r2, [r3, #16]
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <I2C_init_+0x114>)
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	0289      	lsls	r1, r1, #10
 80009d0:	430a      	orrs	r2, r1
 80009d2:	611a      	str	r2, [r3, #16]
	I2C1->TIMINGR |= (0x4 << 20); //SCLDEL
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <I2C_init_+0x114>)
 80009d6:	691a      	ldr	r2, [r3, #16]
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <I2C_init_+0x114>)
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	03c9      	lsls	r1, r1, #15
 80009de:	430a      	orrs	r2, r1
 80009e0:	611a      	str	r2, [r3, #16]

	I2C1->CR1 |= (1U << 0); //PE
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <I2C_init_+0x114>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <I2C_init_+0x114>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	430a      	orrs	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]


	NVIC_SetPriority(I2C1_IRQn, 1);
 80009ee:	2101      	movs	r1, #1
 80009f0:	2017      	movs	r0, #23
 80009f2:	f7ff ff11 	bl	8000818 <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_IRQn);
 80009f6:	2017      	movs	r0, #23
 80009f8:	f7ff fef4 	bl	80007e4 <__NVIC_EnableIRQ>
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40021000 	.word	0x40021000
 8000a08:	50000400 	.word	0x50000400
 8000a0c:	fffcffff 	.word	0xfffcffff
 8000a10:	fff3ffff 	.word	0xfff3ffff
 8000a14:	40005400 	.word	0x40005400

08000a18 <write_general>:




void write_general(uint8_t devAddr, uint8_t *data, uint32_t num){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	230f      	movs	r3, #15
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	1c02      	adds	r2, r0, #0
 8000a28:	701a      	strb	r2, [r3, #0]
	while((I2C1->ISR & (1 << 15)));
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <write_general+0x98>)
 8000a2e:	699a      	ldr	r2, [r3, #24]
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	4013      	ands	r3, r2
 8000a36:	d1f9      	bne.n	8000a2c <write_general+0x14>

	I2C1->CR2 = 0;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <write_general+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= ((uint32_t)devAddr << 1); // slave address
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <write_general+0x98>)
 8000a40:	6859      	ldr	r1, [r3, #4]
 8000a42:	230f      	movs	r3, #15
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	005a      	lsls	r2, r3, #1
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <write_general+0x98>)
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (num << 16); // Number of byte
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <write_general+0x98>)
 8000a52:	6859      	ldr	r1, [r3, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	041a      	lsls	r2, r3, #16
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <write_general+0x98>)
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 25); // AUTOEND
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <write_general+0x98>)
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <write_general+0x98>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0489      	lsls	r1, r1, #18
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 13); // Generate Start
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <write_general+0x98>)
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <write_general+0x98>)
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	0189      	lsls	r1, r1, #6
 8000a76:	430a      	orrs	r2, r1
 8000a78:	605a      	str	r2, [r3, #4]


	for (uint32_t i=0; i<num; ++i){
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e00e      	b.n	8000a9e <write_general+0x86>
		while(!(I2C1->ISR & (1 << 1))); //TXIS
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <write_general+0x98>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	2202      	movs	r2, #2
 8000a88:	4013      	ands	r3, r2
 8000a8a:	d0fa      	beq.n	8000a82 <write_general+0x6a>
		I2C1->TXDR = (uint32_t)data[i];
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <write_general+0x98>)
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
	for (uint32_t i=0; i<num; ++i){
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697a      	ldr	r2, [r7, #20]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d3ec      	bcc.n	8000a80 <write_general+0x68>
	}
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b006      	add	sp, #24
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	40005400 	.word	0x40005400

08000ab4 <read_general>:


void read_general(uint8_t devAddr, uint8_t *data, uint32_t num){
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	240f      	movs	r4, #15
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	1c02      	adds	r2, r0, #0
 8000ac4:	701a      	strb	r2, [r3, #0]

	I2C1->CR2 = 0;
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <read_general+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= ((uint32_t)devAddr << 1);
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <read_general+0xa4>)
 8000ace:	6859      	ldr	r1, [r3, #4]
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	005a      	lsls	r2, r3, #1
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <read_general+0xa4>)
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 10); //READ mode
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <read_general+0xa4>)
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <read_general+0xa4>)
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	00c9      	lsls	r1, r1, #3
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (num << 16); //Number of bytes
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <read_general+0xa4>)
 8000aec:	6859      	ldr	r1, [r3, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	041a      	lsls	r2, r3, #16
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <read_general+0xa4>)
 8000af4:	430a      	orrs	r2, r1
 8000af6:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 15); //NACK
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <read_general+0xa4>)
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <read_general+0xa4>)
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	0209      	lsls	r1, r1, #8
 8000b02:	430a      	orrs	r2, r1
 8000b04:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 25); //AUTOEND
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <read_general+0xa4>)
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <read_general+0xa4>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	0489      	lsls	r1, r1, #18
 8000b10:	430a      	orrs	r2, r1
 8000b12:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= (1U << 13); //Generate Start
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <read_general+0xa4>)
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <read_general+0xa4>)
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	0189      	lsls	r1, r1, #6
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	605a      	str	r2, [r3, #4]

	for(uint32_t i=0; i<num; i++){
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	e00f      	b.n	8000b48 <read_general+0x94>
		while(!(I2C1->ISR & (1 << 2))); // wait until RXNE =1
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <read_general+0xa4>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	2204      	movs	r2, #4
 8000b30:	4013      	ands	r3, r2
 8000b32:	d0fa      	beq.n	8000b2a <read_general+0x76>
		data[i] = (uint8_t)I2C1->RXDR;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <read_general+0xa4>)
 8000b36:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	18d3      	adds	r3, r2, r3
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<num; i++){
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d3eb      	bcc.n	8000b28 <read_general+0x74>
		}
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b007      	add	sp, #28
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	40005400 	.word	0x40005400

08000b5c <display_SSD>:
	GPIOA->MODER |= (1U << 2*12);//PA12 is output


}

void display_SSD(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

	static int i = 0;

		if(i == 1){
 8000b60:	4b5f      	ldr	r3, [pc, #380]	; (8000ce0 <display_SSD+0x184>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d127      	bne.n	8000bb8 <display_SSD+0x5c>
			GPIOA->ODR |= (1U << 7); //PA7
 8000b68:	23a0      	movs	r3, #160	; 0xa0
 8000b6a:	05db      	lsls	r3, r3, #23
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	23a0      	movs	r3, #160	; 0xa0
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
			GPIOB->ODR &= ~(1U << 6); //PB6
 8000b78:	4b5a      	ldr	r3, [pc, #360]	; (8000ce4 <display_SSD+0x188>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	4b59      	ldr	r3, [pc, #356]	; (8000ce4 <display_SSD+0x188>)
 8000b7e:	2140      	movs	r1, #64	; 0x40
 8000b80:	438a      	bics	r2, r1
 8000b82:	615a      	str	r2, [r3, #20]
			GPIOB->ODR &= ~(1U << 7); //PB7
 8000b84:	4b57      	ldr	r3, [pc, #348]	; (8000ce4 <display_SSD+0x188>)
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <display_SSD+0x188>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	438a      	bics	r2, r1
 8000b8e:	615a      	str	r2, [r3, #20]
			GPIOB->ODR &= ~(1U << 1); //PB1
 8000b90:	4b54      	ldr	r3, [pc, #336]	; (8000ce4 <display_SSD+0x188>)
 8000b92:	695a      	ldr	r2, [r3, #20]
 8000b94:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <display_SSD+0x188>)
 8000b96:	2102      	movs	r1, #2
 8000b98:	438a      	bics	r2, r1
 8000b9a:	615a      	str	r2, [r3, #20]
			printDigit_SSD(Display.Digits[0]);
 8000b9c:	4b52      	ldr	r3, [pc, #328]	; (8000ce8 <display_SSD+0x18c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 f8a3 	bl	8000cec <printDigit_SSD>
			GPIOA->ODR |= ( 1U << 6); // PA6
 8000ba6:	23a0      	movs	r3, #160	; 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	23a0      	movs	r3, #160	; 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	e08a      	b.n	8000cce <display_SSD+0x172>

		}
		else if(i == 10){
 8000bb8:	4b49      	ldr	r3, [pc, #292]	; (8000ce0 <display_SSD+0x184>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b0a      	cmp	r3, #10
 8000bbe:	d127      	bne.n	8000c10 <display_SSD+0xb4>
			GPIOA->ODR &= ~(1U << 7); //PA7
 8000bc0:	23a0      	movs	r3, #160	; 0xa0
 8000bc2:	05db      	lsls	r3, r3, #23
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	23a0      	movs	r3, #160	; 0xa0
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	438a      	bics	r2, r1
 8000bce:	615a      	str	r2, [r3, #20]
			GPIOB->ODR |= (1U << 6); //PB6
 8000bd0:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <display_SSD+0x188>)
 8000bd2:	695a      	ldr	r2, [r3, #20]
 8000bd4:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <display_SSD+0x188>)
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	615a      	str	r2, [r3, #20]
			GPIOB->ODR &= ~(1U << 7); //PB7
 8000bdc:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <display_SSD+0x188>)
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	4b40      	ldr	r3, [pc, #256]	; (8000ce4 <display_SSD+0x188>)
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	438a      	bics	r2, r1
 8000be6:	615a      	str	r2, [r3, #20]
			GPIOB->ODR &= ~(1U << 1); //PB1
 8000be8:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <display_SSD+0x188>)
 8000bea:	695a      	ldr	r2, [r3, #20]
 8000bec:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <display_SSD+0x188>)
 8000bee:	2102      	movs	r1, #2
 8000bf0:	438a      	bics	r2, r1
 8000bf2:	615a      	str	r2, [r3, #20]
			printDigit_SSD(Display.Digits[1]);
 8000bf4:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <display_SSD+0x18c>)
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 f877 	bl	8000cec <printDigit_SSD>
			GPIOA->ODR |= ( 1U << 6); // PA6
 8000bfe:	23a0      	movs	r3, #160	; 0xa0
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	695a      	ldr	r2, [r3, #20]
 8000c04:	23a0      	movs	r3, #160	; 0xa0
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	2140      	movs	r1, #64	; 0x40
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	e05e      	b.n	8000cce <display_SSD+0x172>

		}

		else if(i == 20){
 8000c10:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <display_SSD+0x184>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b14      	cmp	r3, #20
 8000c16:	d127      	bne.n	8000c68 <display_SSD+0x10c>
			GPIOA->ODR &= ~(1U << 7); //PA7
 8000c18:	23a0      	movs	r3, #160	; 0xa0
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	23a0      	movs	r3, #160	; 0xa0
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	438a      	bics	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]
			GPIOB->ODR &= ~(1U << 6); //PB6
 8000c28:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <display_SSD+0x188>)
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <display_SSD+0x188>)
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	438a      	bics	r2, r1
 8000c32:	615a      	str	r2, [r3, #20]
			GPIOB->ODR |= (1U << 7); //PB7
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <display_SSD+0x188>)
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <display_SSD+0x188>)
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	615a      	str	r2, [r3, #20]
			GPIOB->ODR &= ~(1U << 1); //PB1
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <display_SSD+0x188>)
 8000c42:	695a      	ldr	r2, [r3, #20]
 8000c44:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <display_SSD+0x188>)
 8000c46:	2102      	movs	r1, #2
 8000c48:	438a      	bics	r2, r1
 8000c4a:	615a      	str	r2, [r3, #20]
			printDigit_SSD(Display.Digits[2]);
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <display_SSD+0x18c>)
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 f84b 	bl	8000cec <printDigit_SSD>
			GPIOA->ODR |= ( 1U << 6); // PA6
 8000c56:	23a0      	movs	r3, #160	; 0xa0
 8000c58:	05db      	lsls	r3, r3, #23
 8000c5a:	695a      	ldr	r2, [r3, #20]
 8000c5c:	23a0      	movs	r3, #160	; 0xa0
 8000c5e:	05db      	lsls	r3, r3, #23
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	430a      	orrs	r2, r1
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	e032      	b.n	8000cce <display_SSD+0x172>

		}
		else if(i == 30){
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <display_SSD+0x184>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b1e      	cmp	r3, #30
 8000c6e:	d127      	bne.n	8000cc0 <display_SSD+0x164>
			GPIOA->ODR &= ~(1U << 7); //PA7
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	695a      	ldr	r2, [r3, #20]
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	438a      	bics	r2, r1
 8000c7e:	615a      	str	r2, [r3, #20]
			GPIOB->ODR &= ~(1U << 6); //PB6
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <display_SSD+0x188>)
 8000c82:	695a      	ldr	r2, [r3, #20]
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <display_SSD+0x188>)
 8000c86:	2140      	movs	r1, #64	; 0x40
 8000c88:	438a      	bics	r2, r1
 8000c8a:	615a      	str	r2, [r3, #20]
			GPIOB->ODR &= ~(1U << 7); //PB7
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <display_SSD+0x188>)
 8000c8e:	695a      	ldr	r2, [r3, #20]
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <display_SSD+0x188>)
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	438a      	bics	r2, r1
 8000c96:	615a      	str	r2, [r3, #20]
			GPIOB->ODR |= (1U << 1); //PB1
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <display_SSD+0x188>)
 8000c9a:	695a      	ldr	r2, [r3, #20]
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <display_SSD+0x188>)
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	615a      	str	r2, [r3, #20]
			printDigit_SSD(Display.Digits[3]);
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <display_SSD+0x18c>)
 8000ca6:	78db      	ldrb	r3, [r3, #3]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 f81f 	bl	8000cec <printDigit_SSD>
			GPIOA->ODR |= ( 1U << 6); // PA6
 8000cae:	23a0      	movs	r3, #160	; 0xa0
 8000cb0:	05db      	lsls	r3, r3, #23
 8000cb2:	695a      	ldr	r2, [r3, #20]
 8000cb4:	23a0      	movs	r3, #160	; 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	2140      	movs	r1, #64	; 0x40
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	e006      	b.n	8000cce <display_SSD+0x172>

		}
		else if(i == 40) i = 0;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <display_SSD+0x184>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b28      	cmp	r3, #40	; 0x28
 8000cc6:	d102      	bne.n	8000cce <display_SSD+0x172>
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <display_SSD+0x184>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]

		i++;
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <display_SSD+0x184>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	4b02      	ldr	r3, [pc, #8]	; (8000ce0 <display_SSD+0x184>)
 8000cd6:	601a      	str	r2, [r3, #0]




}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20000088 	.word	0x20000088
 8000ce4:	50000400 	.word	0x50000400
 8000ce8:	20000100 	.word	0x20000100

08000cec <printDigit_SSD>:

void printDigit_SSD(uint8_t x){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	701a      	strb	r2, [r3, #0]

		switch(x){
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b23      	cmp	r3, #35	; 0x23
 8000cfe:	d901      	bls.n	8000d04 <printDigit_SSD+0x18>
 8000d00:	f000 fce4 	bl	80016cc <printDigit_SSD+0x9e0>
 8000d04:	009a      	lsls	r2, r3, #2
 8000d06:	4be3      	ldr	r3, [pc, #908]	; (8001094 <printDigit_SSD+0x3a8>)
 8000d08:	18d3      	adds	r3, r2, r3
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	469f      	mov	pc, r3
		case 0:		//0

			GPIOB->ODR &= ~( 1U << 3); // PB3
 8000d0e:	4be2      	ldr	r3, [pc, #904]	; (8001098 <printDigit_SSD+0x3ac>)
 8000d10:	695a      	ldr	r2, [r3, #20]
 8000d12:	4be1      	ldr	r3, [pc, #900]	; (8001098 <printDigit_SSD+0x3ac>)
 8000d14:	2108      	movs	r1, #8
 8000d16:	438a      	bics	r2, r1
 8000d18:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 8000d1a:	23a0      	movs	r3, #160	; 0xa0
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	695a      	ldr	r2, [r3, #20]
 8000d20:	23a0      	movs	r3, #160	; 0xa0
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	2101      	movs	r1, #1
 8000d26:	438a      	bics	r2, r1
 8000d28:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 8000d2a:	23a0      	movs	r3, #160	; 0xa0
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	23a0      	movs	r3, #160	; 0xa0
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	2102      	movs	r1, #2
 8000d36:	438a      	bics	r2, r1
 8000d38:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 8000d3a:	23a0      	movs	r3, #160	; 0xa0
 8000d3c:	05db      	lsls	r3, r3, #23
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	23a0      	movs	r3, #160	; 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2110      	movs	r1, #16
 8000d46:	438a      	bics	r2, r1
 8000d48:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 8000d4a:	23a0      	movs	r3, #160	; 0xa0
 8000d4c:	05db      	lsls	r3, r3, #23
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	23a0      	movs	r3, #160	; 0xa0
 8000d52:	05db      	lsls	r3, r3, #23
 8000d54:	2120      	movs	r1, #32
 8000d56:	438a      	bics	r2, r1
 8000d58:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 8000d5a:	23a0      	movs	r3, #160	; 0xa0
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	695a      	ldr	r2, [r3, #20]
 8000d60:	23a0      	movs	r3, #160	; 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	49cd      	ldr	r1, [pc, #820]	; (800109c <printDigit_SSD+0x3b0>)
 8000d66:	400a      	ands	r2, r1
 8000d68:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 11); // PA11
 8000d6a:	23a0      	movs	r3, #160	; 0xa0
 8000d6c:	05db      	lsls	r3, r3, #23
 8000d6e:	695a      	ldr	r2, [r3, #20]
 8000d70:	23a0      	movs	r3, #160	; 0xa0
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	0109      	lsls	r1, r1, #4
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	615a      	str	r2, [r3, #20]

			break;
 8000d7c:	f000 fca6 	bl	80016cc <printDigit_SSD+0x9e0>

		case 1:		//1
			GPIOB->ODR |= ( 1U << 3); // PB3
 8000d80:	4bc5      	ldr	r3, [pc, #788]	; (8001098 <printDigit_SSD+0x3ac>)
 8000d82:	695a      	ldr	r2, [r3, #20]
 8000d84:	4bc4      	ldr	r3, [pc, #784]	; (8001098 <printDigit_SSD+0x3ac>)
 8000d86:	2108      	movs	r1, #8
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 8000d8c:	23a0      	movs	r3, #160	; 0xa0
 8000d8e:	05db      	lsls	r3, r3, #23
 8000d90:	695a      	ldr	r2, [r3, #20]
 8000d92:	23a0      	movs	r3, #160	; 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	2101      	movs	r1, #1
 8000d98:	438a      	bics	r2, r1
 8000d9a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 8000d9c:	23a0      	movs	r3, #160	; 0xa0
 8000d9e:	05db      	lsls	r3, r3, #23
 8000da0:	695a      	ldr	r2, [r3, #20]
 8000da2:	23a0      	movs	r3, #160	; 0xa0
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	2102      	movs	r1, #2
 8000da8:	438a      	bics	r2, r1
 8000daa:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 4); // PA4
 8000dac:	23a0      	movs	r3, #160	; 0xa0
 8000dae:	05db      	lsls	r3, r3, #23
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	23a0      	movs	r3, #160	; 0xa0
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	2110      	movs	r1, #16
 8000db8:	430a      	orrs	r2, r1
 8000dba:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 5); // PA5
 8000dbc:	23a0      	movs	r3, #160	; 0xa0
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	695a      	ldr	r2, [r3, #20]
 8000dc2:	23a0      	movs	r3, #160	; 0xa0
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 12); // PA12
 8000dcc:	23a0      	movs	r3, #160	; 0xa0
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	695a      	ldr	r2, [r3, #20]
 8000dd2:	23a0      	movs	r3, #160	; 0xa0
 8000dd4:	05db      	lsls	r3, r3, #23
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	0149      	lsls	r1, r1, #5
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 11); // PA11
 8000dde:	23a0      	movs	r3, #160	; 0xa0
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	695a      	ldr	r2, [r3, #20]
 8000de4:	23a0      	movs	r3, #160	; 0xa0
 8000de6:	05db      	lsls	r3, r3, #23
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	0109      	lsls	r1, r1, #4
 8000dec:	430a      	orrs	r2, r1
 8000dee:	615a      	str	r2, [r3, #20]

			break;
 8000df0:	f000 fc6c 	bl	80016cc <printDigit_SSD+0x9e0>

		case 2:		//2
			GPIOB->ODR &= ~( 1U << 3); // PB3
 8000df4:	4ba8      	ldr	r3, [pc, #672]	; (8001098 <printDigit_SSD+0x3ac>)
 8000df6:	695a      	ldr	r2, [r3, #20]
 8000df8:	4ba7      	ldr	r3, [pc, #668]	; (8001098 <printDigit_SSD+0x3ac>)
 8000dfa:	2108      	movs	r1, #8
 8000dfc:	438a      	bics	r2, r1
 8000dfe:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 8000e00:	23a0      	movs	r3, #160	; 0xa0
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 1); // PA1
 8000e10:	23a0      	movs	r3, #160	; 0xa0
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	23a0      	movs	r3, #160	; 0xa0
 8000e18:	05db      	lsls	r3, r3, #23
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 8000e20:	23a0      	movs	r3, #160	; 0xa0
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	23a0      	movs	r3, #160	; 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	438a      	bics	r2, r1
 8000e2e:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 8000e30:	23a0      	movs	r3, #160	; 0xa0
 8000e32:	05db      	lsls	r3, r3, #23
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	23a0      	movs	r3, #160	; 0xa0
 8000e38:	05db      	lsls	r3, r3, #23
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	438a      	bics	r2, r1
 8000e3e:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 12); // PA12
 8000e40:	23a0      	movs	r3, #160	; 0xa0
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	23a0      	movs	r3, #160	; 0xa0
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0149      	lsls	r1, r1, #5
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 8000e52:	23a0      	movs	r3, #160	; 0xa0
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	695a      	ldr	r2, [r3, #20]
 8000e58:	23a0      	movs	r3, #160	; 0xa0
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	4990      	ldr	r1, [pc, #576]	; (80010a0 <printDigit_SSD+0x3b4>)
 8000e5e:	400a      	ands	r2, r1
 8000e60:	615a      	str	r2, [r3, #20]

			break;
 8000e62:	f000 fc33 	bl	80016cc <printDigit_SSD+0x9e0>

		case 3:		//3

			GPIOB->ODR &= ~( 1U << 3); // PB3
 8000e66:	4b8c      	ldr	r3, [pc, #560]	; (8001098 <printDigit_SSD+0x3ac>)
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	4b8b      	ldr	r3, [pc, #556]	; (8001098 <printDigit_SSD+0x3ac>)
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	438a      	bics	r2, r1
 8000e70:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	695a      	ldr	r2, [r3, #20]
 8000e78:	23a0      	movs	r3, #160	; 0xa0
 8000e7a:	05db      	lsls	r3, r3, #23
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	438a      	bics	r2, r1
 8000e80:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 8000e82:	23a0      	movs	r3, #160	; 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	23a0      	movs	r3, #160	; 0xa0
 8000e8a:	05db      	lsls	r3, r3, #23
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	438a      	bics	r2, r1
 8000e90:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	695a      	ldr	r2, [r3, #20]
 8000e98:	23a0      	movs	r3, #160	; 0xa0
 8000e9a:	05db      	lsls	r3, r3, #23
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	438a      	bics	r2, r1
 8000ea0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 5); // PA5
 8000ea2:	23a0      	movs	r3, #160	; 0xa0
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	695a      	ldr	r2, [r3, #20]
 8000ea8:	23a0      	movs	r3, #160	; 0xa0
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	2120      	movs	r1, #32
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 12); // PA12
 8000eb2:	23a0      	movs	r3, #160	; 0xa0
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	695a      	ldr	r2, [r3, #20]
 8000eb8:	23a0      	movs	r3, #160	; 0xa0
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	0149      	lsls	r1, r1, #5
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 8000ec4:	23a0      	movs	r3, #160	; 0xa0
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	4974      	ldr	r1, [pc, #464]	; (80010a0 <printDigit_SSD+0x3b4>)
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	615a      	str	r2, [r3, #20]

			break;
 8000ed4:	f000 fbfa 	bl	80016cc <printDigit_SSD+0x9e0>

		case 4:		//4
			GPIOB->ODR |=  ( 1U << 3); // PB3
 8000ed8:	4b6f      	ldr	r3, [pc, #444]	; (8001098 <printDigit_SSD+0x3ac>)
 8000eda:	695a      	ldr	r2, [r3, #20]
 8000edc:	4b6e      	ldr	r3, [pc, #440]	; (8001098 <printDigit_SSD+0x3ac>)
 8000ede:	2108      	movs	r1, #8
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 8000ee4:	23a0      	movs	r3, #160	; 0xa0
 8000ee6:	05db      	lsls	r3, r3, #23
 8000ee8:	695a      	ldr	r2, [r3, #20]
 8000eea:	23a0      	movs	r3, #160	; 0xa0
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	2101      	movs	r1, #1
 8000ef0:	438a      	bics	r2, r1
 8000ef2:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 8000ef4:	23a0      	movs	r3, #160	; 0xa0
 8000ef6:	05db      	lsls	r3, r3, #23
 8000ef8:	695a      	ldr	r2, [r3, #20]
 8000efa:	23a0      	movs	r3, #160	; 0xa0
 8000efc:	05db      	lsls	r3, r3, #23
 8000efe:	2102      	movs	r1, #2
 8000f00:	438a      	bics	r2, r1
 8000f02:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 4); // PA4
 8000f04:	23a0      	movs	r3, #160	; 0xa0
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	23a0      	movs	r3, #160	; 0xa0
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	2110      	movs	r1, #16
 8000f10:	430a      	orrs	r2, r1
 8000f12:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 5); // PA5
 8000f14:	23a0      	movs	r3, #160	; 0xa0
 8000f16:	05db      	lsls	r3, r3, #23
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	23a0      	movs	r3, #160	; 0xa0
 8000f1c:	05db      	lsls	r3, r3, #23
 8000f1e:	2120      	movs	r1, #32
 8000f20:	430a      	orrs	r2, r1
 8000f22:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 8000f24:	23a0      	movs	r3, #160	; 0xa0
 8000f26:	05db      	lsls	r3, r3, #23
 8000f28:	695a      	ldr	r2, [r3, #20]
 8000f2a:	23a0      	movs	r3, #160	; 0xa0
 8000f2c:	05db      	lsls	r3, r3, #23
 8000f2e:	495b      	ldr	r1, [pc, #364]	; (800109c <printDigit_SSD+0x3b0>)
 8000f30:	400a      	ands	r2, r1
 8000f32:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 8000f34:	23a0      	movs	r3, #160	; 0xa0
 8000f36:	05db      	lsls	r3, r3, #23
 8000f38:	695a      	ldr	r2, [r3, #20]
 8000f3a:	23a0      	movs	r3, #160	; 0xa0
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	4958      	ldr	r1, [pc, #352]	; (80010a0 <printDigit_SSD+0x3b4>)
 8000f40:	400a      	ands	r2, r1
 8000f42:	615a      	str	r2, [r3, #20]

			break;
 8000f44:	e3c2      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 5:		//5

			GPIOB->ODR &= ~( 1U << 3); // PB3
 8000f46:	4b54      	ldr	r3, [pc, #336]	; (8001098 <printDigit_SSD+0x3ac>)
 8000f48:	695a      	ldr	r2, [r3, #20]
 8000f4a:	4b53      	ldr	r3, [pc, #332]	; (8001098 <printDigit_SSD+0x3ac>)
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	438a      	bics	r2, r1
 8000f50:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 0); // PA0
 8000f52:	23a0      	movs	r3, #160	; 0xa0
 8000f54:	05db      	lsls	r3, r3, #23
 8000f56:	695a      	ldr	r2, [r3, #20]
 8000f58:	23a0      	movs	r3, #160	; 0xa0
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 8000f62:	23a0      	movs	r3, #160	; 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	23a0      	movs	r3, #160	; 0xa0
 8000f6a:	05db      	lsls	r3, r3, #23
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	438a      	bics	r2, r1
 8000f70:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 8000f72:	23a0      	movs	r3, #160	; 0xa0
 8000f74:	05db      	lsls	r3, r3, #23
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	23a0      	movs	r3, #160	; 0xa0
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	438a      	bics	r2, r1
 8000f80:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 5); // PA5
 8000f82:	23a0      	movs	r3, #160	; 0xa0
 8000f84:	05db      	lsls	r3, r3, #23
 8000f86:	695a      	ldr	r2, [r3, #20]
 8000f88:	23a0      	movs	r3, #160	; 0xa0
 8000f8a:	05db      	lsls	r3, r3, #23
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 8000f92:	23a0      	movs	r3, #160	; 0xa0
 8000f94:	05db      	lsls	r3, r3, #23
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	23a0      	movs	r3, #160	; 0xa0
 8000f9a:	05db      	lsls	r3, r3, #23
 8000f9c:	493f      	ldr	r1, [pc, #252]	; (800109c <printDigit_SSD+0x3b0>)
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 8000fa2:	23a0      	movs	r3, #160	; 0xa0
 8000fa4:	05db      	lsls	r3, r3, #23
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	23a0      	movs	r3, #160	; 0xa0
 8000faa:	05db      	lsls	r3, r3, #23
 8000fac:	493c      	ldr	r1, [pc, #240]	; (80010a0 <printDigit_SSD+0x3b4>)
 8000fae:	400a      	ands	r2, r1
 8000fb0:	615a      	str	r2, [r3, #20]

			break;
 8000fb2:	e38b      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 6:		//6
			GPIOB->ODR &= ~( 1U << 3); // PB3
 8000fb4:	4b38      	ldr	r3, [pc, #224]	; (8001098 <printDigit_SSD+0x3ac>)
 8000fb6:	695a      	ldr	r2, [r3, #20]
 8000fb8:	4b37      	ldr	r3, [pc, #220]	; (8001098 <printDigit_SSD+0x3ac>)
 8000fba:	2108      	movs	r1, #8
 8000fbc:	438a      	bics	r2, r1
 8000fbe:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 0); // PA0
 8000fc0:	23a0      	movs	r3, #160	; 0xa0
 8000fc2:	05db      	lsls	r3, r3, #23
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	23a0      	movs	r3, #160	; 0xa0
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	2101      	movs	r1, #1
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 8000fd0:	23a0      	movs	r3, #160	; 0xa0
 8000fd2:	05db      	lsls	r3, r3, #23
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	23a0      	movs	r3, #160	; 0xa0
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	2102      	movs	r1, #2
 8000fdc:	438a      	bics	r2, r1
 8000fde:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 8000fe0:	23a0      	movs	r3, #160	; 0xa0
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	695a      	ldr	r2, [r3, #20]
 8000fe6:	23a0      	movs	r3, #160	; 0xa0
 8000fe8:	05db      	lsls	r3, r3, #23
 8000fea:	2110      	movs	r1, #16
 8000fec:	438a      	bics	r2, r1
 8000fee:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 8000ff0:	23a0      	movs	r3, #160	; 0xa0
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	695a      	ldr	r2, [r3, #20]
 8000ff6:	23a0      	movs	r3, #160	; 0xa0
 8000ff8:	05db      	lsls	r3, r3, #23
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 8001000:	23a0      	movs	r3, #160	; 0xa0
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	23a0      	movs	r3, #160	; 0xa0
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	4924      	ldr	r1, [pc, #144]	; (800109c <printDigit_SSD+0x3b0>)
 800100c:	400a      	ands	r2, r1
 800100e:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 8001010:	23a0      	movs	r3, #160	; 0xa0
 8001012:	05db      	lsls	r3, r3, #23
 8001014:	695a      	ldr	r2, [r3, #20]
 8001016:	23a0      	movs	r3, #160	; 0xa0
 8001018:	05db      	lsls	r3, r3, #23
 800101a:	4921      	ldr	r1, [pc, #132]	; (80010a0 <printDigit_SSD+0x3b4>)
 800101c:	400a      	ands	r2, r1
 800101e:	615a      	str	r2, [r3, #20]

			break;
 8001020:	e354      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 7:		//7

			GPIOB->ODR &= ~( 1U << 3); // PB3
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <printDigit_SSD+0x3ac>)
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <printDigit_SSD+0x3ac>)
 8001028:	2108      	movs	r1, #8
 800102a:	438a      	bics	r2, r1
 800102c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 800102e:	23a0      	movs	r3, #160	; 0xa0
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	695a      	ldr	r2, [r3, #20]
 8001034:	23a0      	movs	r3, #160	; 0xa0
 8001036:	05db      	lsls	r3, r3, #23
 8001038:	2101      	movs	r1, #1
 800103a:	438a      	bics	r2, r1
 800103c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	05db      	lsls	r3, r3, #23
 8001042:	695a      	ldr	r2, [r3, #20]
 8001044:	23a0      	movs	r3, #160	; 0xa0
 8001046:	05db      	lsls	r3, r3, #23
 8001048:	2102      	movs	r1, #2
 800104a:	438a      	bics	r2, r1
 800104c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 4); // PA4
 800104e:	23a0      	movs	r3, #160	; 0xa0
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	23a0      	movs	r3, #160	; 0xa0
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	2110      	movs	r1, #16
 800105a:	430a      	orrs	r2, r1
 800105c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 5); // PA5
 800105e:	23a0      	movs	r3, #160	; 0xa0
 8001060:	05db      	lsls	r3, r3, #23
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	23a0      	movs	r3, #160	; 0xa0
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	2120      	movs	r1, #32
 800106a:	430a      	orrs	r2, r1
 800106c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 12); // PA12
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	23a0      	movs	r3, #160	; 0xa0
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	0149      	lsls	r1, r1, #5
 800107c:	430a      	orrs	r2, r1
 800107e:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 11); // PA11
 8001080:	23a0      	movs	r3, #160	; 0xa0
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	23a0      	movs	r3, #160	; 0xa0
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	0109      	lsls	r1, r1, #4
 800108e:	430a      	orrs	r2, r1
 8001090:	615a      	str	r2, [r3, #20]

			break;
 8001092:	e31b      	b.n	80016cc <printDigit_SSD+0x9e0>
 8001094:	08001edc 	.word	0x08001edc
 8001098:	50000400 	.word	0x50000400
 800109c:	ffffefff 	.word	0xffffefff
 80010a0:	fffff7ff 	.word	0xfffff7ff

		case 8:		//8

			GPIOB->ODR &= ~( 1U << 3); // PB3
 80010a4:	4bdd      	ldr	r3, [pc, #884]	; (800141c <printDigit_SSD+0x730>)
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	4bdc      	ldr	r3, [pc, #880]	; (800141c <printDigit_SSD+0x730>)
 80010aa:	2108      	movs	r1, #8
 80010ac:	438a      	bics	r2, r1
 80010ae:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 80010b0:	23a0      	movs	r3, #160	; 0xa0
 80010b2:	05db      	lsls	r3, r3, #23
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	23a0      	movs	r3, #160	; 0xa0
 80010b8:	05db      	lsls	r3, r3, #23
 80010ba:	2101      	movs	r1, #1
 80010bc:	438a      	bics	r2, r1
 80010be:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 80010c0:	23a0      	movs	r3, #160	; 0xa0
 80010c2:	05db      	lsls	r3, r3, #23
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	23a0      	movs	r3, #160	; 0xa0
 80010c8:	05db      	lsls	r3, r3, #23
 80010ca:	2102      	movs	r1, #2
 80010cc:	438a      	bics	r2, r1
 80010ce:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 80010d0:	23a0      	movs	r3, #160	; 0xa0
 80010d2:	05db      	lsls	r3, r3, #23
 80010d4:	695a      	ldr	r2, [r3, #20]
 80010d6:	23a0      	movs	r3, #160	; 0xa0
 80010d8:	05db      	lsls	r3, r3, #23
 80010da:	2110      	movs	r1, #16
 80010dc:	438a      	bics	r2, r1
 80010de:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 80010e0:	23a0      	movs	r3, #160	; 0xa0
 80010e2:	05db      	lsls	r3, r3, #23
 80010e4:	695a      	ldr	r2, [r3, #20]
 80010e6:	23a0      	movs	r3, #160	; 0xa0
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	2120      	movs	r1, #32
 80010ec:	438a      	bics	r2, r1
 80010ee:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 80010f0:	23a0      	movs	r3, #160	; 0xa0
 80010f2:	05db      	lsls	r3, r3, #23
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	23a0      	movs	r3, #160	; 0xa0
 80010f8:	05db      	lsls	r3, r3, #23
 80010fa:	49c9      	ldr	r1, [pc, #804]	; (8001420 <printDigit_SSD+0x734>)
 80010fc:	400a      	ands	r2, r1
 80010fe:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 8001100:	23a0      	movs	r3, #160	; 0xa0
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	23a0      	movs	r3, #160	; 0xa0
 8001108:	05db      	lsls	r3, r3, #23
 800110a:	49c6      	ldr	r1, [pc, #792]	; (8001424 <printDigit_SSD+0x738>)
 800110c:	400a      	ands	r2, r1
 800110e:	615a      	str	r2, [r3, #20]

			break;
 8001110:	e2dc      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 9:		//9
			GPIOB->ODR &= ~( 1U << 3); // PB3
 8001112:	4bc2      	ldr	r3, [pc, #776]	; (800141c <printDigit_SSD+0x730>)
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	4bc1      	ldr	r3, [pc, #772]	; (800141c <printDigit_SSD+0x730>)
 8001118:	2108      	movs	r1, #8
 800111a:	438a      	bics	r2, r1
 800111c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 800111e:	23a0      	movs	r3, #160	; 0xa0
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	23a0      	movs	r3, #160	; 0xa0
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	2101      	movs	r1, #1
 800112a:	438a      	bics	r2, r1
 800112c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 800112e:	23a0      	movs	r3, #160	; 0xa0
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	23a0      	movs	r3, #160	; 0xa0
 8001136:	05db      	lsls	r3, r3, #23
 8001138:	2102      	movs	r1, #2
 800113a:	438a      	bics	r2, r1
 800113c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 800113e:	23a0      	movs	r3, #160	; 0xa0
 8001140:	05db      	lsls	r3, r3, #23
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	23a0      	movs	r3, #160	; 0xa0
 8001146:	05db      	lsls	r3, r3, #23
 8001148:	2110      	movs	r1, #16
 800114a:	438a      	bics	r2, r1
 800114c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 5); // PA5
 800114e:	23a0      	movs	r3, #160	; 0xa0
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	695a      	ldr	r2, [r3, #20]
 8001154:	23a0      	movs	r3, #160	; 0xa0
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	2120      	movs	r1, #32
 800115a:	430a      	orrs	r2, r1
 800115c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 800115e:	23a0      	movs	r3, #160	; 0xa0
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	695a      	ldr	r2, [r3, #20]
 8001164:	23a0      	movs	r3, #160	; 0xa0
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	49ad      	ldr	r1, [pc, #692]	; (8001420 <printDigit_SSD+0x734>)
 800116a:	400a      	ands	r2, r1
 800116c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 800116e:	23a0      	movs	r3, #160	; 0xa0
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	23a0      	movs	r3, #160	; 0xa0
 8001176:	05db      	lsls	r3, r3, #23
 8001178:	49aa      	ldr	r1, [pc, #680]	; (8001424 <printDigit_SSD+0x738>)
 800117a:	400a      	ands	r2, r1
 800117c:	615a      	str	r2, [r3, #20]

			break;
 800117e:	e2a5      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 10://A

			GPIOB->ODR &= ~( 1U << 3); // PB3
 8001180:	4ba6      	ldr	r3, [pc, #664]	; (800141c <printDigit_SSD+0x730>)
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	4ba5      	ldr	r3, [pc, #660]	; (800141c <printDigit_SSD+0x730>)
 8001186:	2108      	movs	r1, #8
 8001188:	438a      	bics	r2, r1
 800118a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 800118c:	23a0      	movs	r3, #160	; 0xa0
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	23a0      	movs	r3, #160	; 0xa0
 8001194:	05db      	lsls	r3, r3, #23
 8001196:	2101      	movs	r1, #1
 8001198:	438a      	bics	r2, r1
 800119a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 800119c:	23a0      	movs	r3, #160	; 0xa0
 800119e:	05db      	lsls	r3, r3, #23
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	23a0      	movs	r3, #160	; 0xa0
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	2102      	movs	r1, #2
 80011a8:	438a      	bics	r2, r1
 80011aa:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 80011ac:	23a0      	movs	r3, #160	; 0xa0
 80011ae:	05db      	lsls	r3, r3, #23
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	23a0      	movs	r3, #160	; 0xa0
 80011b4:	05db      	lsls	r3, r3, #23
 80011b6:	2110      	movs	r1, #16
 80011b8:	438a      	bics	r2, r1
 80011ba:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 80011bc:	23a0      	movs	r3, #160	; 0xa0
 80011be:	05db      	lsls	r3, r3, #23
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	2120      	movs	r1, #32
 80011c8:	438a      	bics	r2, r1
 80011ca:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 12); // PA12
 80011cc:	23a0      	movs	r3, #160	; 0xa0
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	23a0      	movs	r3, #160	; 0xa0
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	0149      	lsls	r1, r1, #5
 80011da:	430a      	orrs	r2, r1
 80011dc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 80011de:	23a0      	movs	r3, #160	; 0xa0
 80011e0:	05db      	lsls	r3, r3, #23
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	23a0      	movs	r3, #160	; 0xa0
 80011e6:	05db      	lsls	r3, r3, #23
 80011e8:	498e      	ldr	r1, [pc, #568]	; (8001424 <printDigit_SSD+0x738>)
 80011ea:	400a      	ands	r2, r1
 80011ec:	615a      	str	r2, [r3, #20]



			break;
 80011ee:	e26d      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 11://B

			GPIOB->ODR |=  ( 1U << 3); // PB3
 80011f0:	4b8a      	ldr	r3, [pc, #552]	; (800141c <printDigit_SSD+0x730>)
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	4b89      	ldr	r3, [pc, #548]	; (800141c <printDigit_SSD+0x730>)
 80011f6:	2108      	movs	r1, #8
 80011f8:	430a      	orrs	r2, r1
 80011fa:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 0); // PA0
 80011fc:	23a0      	movs	r3, #160	; 0xa0
 80011fe:	05db      	lsls	r3, r3, #23
 8001200:	695a      	ldr	r2, [r3, #20]
 8001202:	23a0      	movs	r3, #160	; 0xa0
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	2101      	movs	r1, #1
 8001208:	430a      	orrs	r2, r1
 800120a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 800120c:	23a0      	movs	r3, #160	; 0xa0
 800120e:	05db      	lsls	r3, r3, #23
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	2102      	movs	r1, #2
 8001218:	438a      	bics	r2, r1
 800121a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 800121c:	23a0      	movs	r3, #160	; 0xa0
 800121e:	05db      	lsls	r3, r3, #23
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	23a0      	movs	r3, #160	; 0xa0
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	2110      	movs	r1, #16
 8001228:	438a      	bics	r2, r1
 800122a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 800122c:	23a0      	movs	r3, #160	; 0xa0
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	23a0      	movs	r3, #160	; 0xa0
 8001234:	05db      	lsls	r3, r3, #23
 8001236:	2120      	movs	r1, #32
 8001238:	438a      	bics	r2, r1
 800123a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 800123c:	23a0      	movs	r3, #160	; 0xa0
 800123e:	05db      	lsls	r3, r3, #23
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	23a0      	movs	r3, #160	; 0xa0
 8001244:	05db      	lsls	r3, r3, #23
 8001246:	4976      	ldr	r1, [pc, #472]	; (8001420 <printDigit_SSD+0x734>)
 8001248:	400a      	ands	r2, r1
 800124a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 800124c:	23a0      	movs	r3, #160	; 0xa0
 800124e:	05db      	lsls	r3, r3, #23
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	23a0      	movs	r3, #160	; 0xa0
 8001254:	05db      	lsls	r3, r3, #23
 8001256:	4973      	ldr	r1, [pc, #460]	; (8001424 <printDigit_SSD+0x738>)
 8001258:	400a      	ands	r2, r1
 800125a:	615a      	str	r2, [r3, #20]


			break;
 800125c:	e236      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 12://C
			GPIOB->ODR &= ~( 1U << 3); // PB3
 800125e:	4b6f      	ldr	r3, [pc, #444]	; (800141c <printDigit_SSD+0x730>)
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	4b6e      	ldr	r3, [pc, #440]	; (800141c <printDigit_SSD+0x730>)
 8001264:	2108      	movs	r1, #8
 8001266:	438a      	bics	r2, r1
 8001268:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 0); // PA0
 800126a:	23a0      	movs	r3, #160	; 0xa0
 800126c:	05db      	lsls	r3, r3, #23
 800126e:	695a      	ldr	r2, [r3, #20]
 8001270:	23a0      	movs	r3, #160	; 0xa0
 8001272:	05db      	lsls	r3, r3, #23
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 1); // PA1
 800127a:	23a0      	movs	r3, #160	; 0xa0
 800127c:	05db      	lsls	r3, r3, #23
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	23a0      	movs	r3, #160	; 0xa0
 8001282:	05db      	lsls	r3, r3, #23
 8001284:	2102      	movs	r1, #2
 8001286:	430a      	orrs	r2, r1
 8001288:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	695a      	ldr	r2, [r3, #20]
 8001290:	23a0      	movs	r3, #160	; 0xa0
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	2110      	movs	r1, #16
 8001296:	438a      	bics	r2, r1
 8001298:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 800129a:	23a0      	movs	r3, #160	; 0xa0
 800129c:	05db      	lsls	r3, r3, #23
 800129e:	695a      	ldr	r2, [r3, #20]
 80012a0:	23a0      	movs	r3, #160	; 0xa0
 80012a2:	05db      	lsls	r3, r3, #23
 80012a4:	2120      	movs	r1, #32
 80012a6:	438a      	bics	r2, r1
 80012a8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 80012aa:	23a0      	movs	r3, #160	; 0xa0
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	695a      	ldr	r2, [r3, #20]
 80012b0:	23a0      	movs	r3, #160	; 0xa0
 80012b2:	05db      	lsls	r3, r3, #23
 80012b4:	495a      	ldr	r1, [pc, #360]	; (8001420 <printDigit_SSD+0x734>)
 80012b6:	400a      	ands	r2, r1
 80012b8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 11); // PA11
 80012ba:	23a0      	movs	r3, #160	; 0xa0
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	695a      	ldr	r2, [r3, #20]
 80012c0:	23a0      	movs	r3, #160	; 0xa0
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0109      	lsls	r1, r1, #4
 80012c8:	430a      	orrs	r2, r1
 80012ca:	615a      	str	r2, [r3, #20]

			break;
 80012cc:	e1fe      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 13://D
			GPIOB->ODR |=  ( 1U << 3); // PB3
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <printDigit_SSD+0x730>)
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	4b52      	ldr	r3, [pc, #328]	; (800141c <printDigit_SSD+0x730>)
 80012d4:	2108      	movs	r1, #8
 80012d6:	430a      	orrs	r2, r1
 80012d8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 80012da:	23a0      	movs	r3, #160	; 0xa0
 80012dc:	05db      	lsls	r3, r3, #23
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	23a0      	movs	r3, #160	; 0xa0
 80012e2:	05db      	lsls	r3, r3, #23
 80012e4:	2101      	movs	r1, #1
 80012e6:	438a      	bics	r2, r1
 80012e8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 80012ea:	23a0      	movs	r3, #160	; 0xa0
 80012ec:	05db      	lsls	r3, r3, #23
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	05db      	lsls	r3, r3, #23
 80012f4:	2102      	movs	r1, #2
 80012f6:	438a      	bics	r2, r1
 80012f8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 80012fa:	23a0      	movs	r3, #160	; 0xa0
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	695a      	ldr	r2, [r3, #20]
 8001300:	23a0      	movs	r3, #160	; 0xa0
 8001302:	05db      	lsls	r3, r3, #23
 8001304:	2110      	movs	r1, #16
 8001306:	438a      	bics	r2, r1
 8001308:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 800130a:	23a0      	movs	r3, #160	; 0xa0
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	23a0      	movs	r3, #160	; 0xa0
 8001312:	05db      	lsls	r3, r3, #23
 8001314:	2120      	movs	r1, #32
 8001316:	438a      	bics	r2, r1
 8001318:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 12); // PA12
 800131a:	23a0      	movs	r3, #160	; 0xa0
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	23a0      	movs	r3, #160	; 0xa0
 8001322:	05db      	lsls	r3, r3, #23
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	0149      	lsls	r1, r1, #5
 8001328:	430a      	orrs	r2, r1
 800132a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 800132c:	23a0      	movs	r3, #160	; 0xa0
 800132e:	05db      	lsls	r3, r3, #23
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	23a0      	movs	r3, #160	; 0xa0
 8001334:	05db      	lsls	r3, r3, #23
 8001336:	493b      	ldr	r1, [pc, #236]	; (8001424 <printDigit_SSD+0x738>)
 8001338:	400a      	ands	r2, r1
 800133a:	615a      	str	r2, [r3, #20]

			break;
 800133c:	e1c6      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 14://E
			GPIOB->ODR &= ~( 1U << 3); // PB3
 800133e:	4b37      	ldr	r3, [pc, #220]	; (800141c <printDigit_SSD+0x730>)
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <printDigit_SSD+0x730>)
 8001344:	2108      	movs	r1, #8
 8001346:	438a      	bics	r2, r1
 8001348:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 0); // PA0
 800134a:	23a0      	movs	r3, #160	; 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	695a      	ldr	r2, [r3, #20]
 8001350:	23a0      	movs	r3, #160	; 0xa0
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	2101      	movs	r1, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 1); // PA1
 800135a:	23a0      	movs	r3, #160	; 0xa0
 800135c:	05db      	lsls	r3, r3, #23
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	23a0      	movs	r3, #160	; 0xa0
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	2102      	movs	r1, #2
 8001366:	430a      	orrs	r2, r1
 8001368:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 800136a:	23a0      	movs	r3, #160	; 0xa0
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	23a0      	movs	r3, #160	; 0xa0
 8001372:	05db      	lsls	r3, r3, #23
 8001374:	2110      	movs	r1, #16
 8001376:	438a      	bics	r2, r1
 8001378:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 800137a:	23a0      	movs	r3, #160	; 0xa0
 800137c:	05db      	lsls	r3, r3, #23
 800137e:	695a      	ldr	r2, [r3, #20]
 8001380:	23a0      	movs	r3, #160	; 0xa0
 8001382:	05db      	lsls	r3, r3, #23
 8001384:	2120      	movs	r1, #32
 8001386:	438a      	bics	r2, r1
 8001388:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 800138a:	23a0      	movs	r3, #160	; 0xa0
 800138c:	05db      	lsls	r3, r3, #23
 800138e:	695a      	ldr	r2, [r3, #20]
 8001390:	23a0      	movs	r3, #160	; 0xa0
 8001392:	05db      	lsls	r3, r3, #23
 8001394:	4922      	ldr	r1, [pc, #136]	; (8001420 <printDigit_SSD+0x734>)
 8001396:	400a      	ands	r2, r1
 8001398:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 800139a:	23a0      	movs	r3, #160	; 0xa0
 800139c:	05db      	lsls	r3, r3, #23
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	23a0      	movs	r3, #160	; 0xa0
 80013a2:	05db      	lsls	r3, r3, #23
 80013a4:	491f      	ldr	r1, [pc, #124]	; (8001424 <printDigit_SSD+0x738>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	615a      	str	r2, [r3, #20]


			break;
 80013aa:	e18f      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 15: //F
			GPIOB->ODR &= ~( 1U << 3); // PB3
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <printDigit_SSD+0x730>)
 80013ae:	695a      	ldr	r2, [r3, #20]
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <printDigit_SSD+0x730>)
 80013b2:	2108      	movs	r1, #8
 80013b4:	438a      	bics	r2, r1
 80013b6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 0); // PA0
 80013b8:	23a0      	movs	r3, #160	; 0xa0
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	695a      	ldr	r2, [r3, #20]
 80013be:	23a0      	movs	r3, #160	; 0xa0
 80013c0:	05db      	lsls	r3, r3, #23
 80013c2:	2101      	movs	r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 1); // PA1
 80013c8:	23a0      	movs	r3, #160	; 0xa0
 80013ca:	05db      	lsls	r3, r3, #23
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	23a0      	movs	r3, #160	; 0xa0
 80013d0:	05db      	lsls	r3, r3, #23
 80013d2:	2102      	movs	r1, #2
 80013d4:	430a      	orrs	r2, r1
 80013d6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 4); // PA4
 80013d8:	23a0      	movs	r3, #160	; 0xa0
 80013da:	05db      	lsls	r3, r3, #23
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	23a0      	movs	r3, #160	; 0xa0
 80013e0:	05db      	lsls	r3, r3, #23
 80013e2:	2110      	movs	r1, #16
 80013e4:	430a      	orrs	r2, r1
 80013e6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 80013e8:	23a0      	movs	r3, #160	; 0xa0
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	23a0      	movs	r3, #160	; 0xa0
 80013f0:	05db      	lsls	r3, r3, #23
 80013f2:	2120      	movs	r1, #32
 80013f4:	438a      	bics	r2, r1
 80013f6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 80013f8:	23a0      	movs	r3, #160	; 0xa0
 80013fa:	05db      	lsls	r3, r3, #23
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	23a0      	movs	r3, #160	; 0xa0
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	4907      	ldr	r1, [pc, #28]	; (8001420 <printDigit_SSD+0x734>)
 8001404:	400a      	ands	r2, r1
 8001406:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 8001408:	23a0      	movs	r3, #160	; 0xa0
 800140a:	05db      	lsls	r3, r3, #23
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	23a0      	movs	r3, #160	; 0xa0
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	4904      	ldr	r1, [pc, #16]	; (8001424 <printDigit_SSD+0x738>)
 8001414:	400a      	ands	r2, r1
 8001416:	615a      	str	r2, [r3, #20]
			break;
 8001418:	e158      	b.n	80016cc <printDigit_SSD+0x9e0>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	50000400 	.word	0x50000400
 8001420:	ffffefff 	.word	0xffffefff
 8001424:	fffff7ff 	.word	0xfffff7ff


		case 30: //u
			GPIOB->ODR |=  ( 1U << 3); // PB3
 8001428:	4baa      	ldr	r3, [pc, #680]	; (80016d4 <printDigit_SSD+0x9e8>)
 800142a:	695a      	ldr	r2, [r3, #20]
 800142c:	4ba9      	ldr	r3, [pc, #676]	; (80016d4 <printDigit_SSD+0x9e8>)
 800142e:	2108      	movs	r1, #8
 8001430:	430a      	orrs	r2, r1
 8001432:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 0); // PA0
 8001434:	23a0      	movs	r3, #160	; 0xa0
 8001436:	05db      	lsls	r3, r3, #23
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	23a0      	movs	r3, #160	; 0xa0
 800143c:	05db      	lsls	r3, r3, #23
 800143e:	2101      	movs	r1, #1
 8001440:	430a      	orrs	r2, r1
 8001442:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 8001444:	23a0      	movs	r3, #160	; 0xa0
 8001446:	05db      	lsls	r3, r3, #23
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	23a0      	movs	r3, #160	; 0xa0
 800144c:	05db      	lsls	r3, r3, #23
 800144e:	2102      	movs	r1, #2
 8001450:	438a      	bics	r2, r1
 8001452:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 8001454:	23a0      	movs	r3, #160	; 0xa0
 8001456:	05db      	lsls	r3, r3, #23
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	05db      	lsls	r3, r3, #23
 800145e:	2110      	movs	r1, #16
 8001460:	438a      	bics	r2, r1
 8001462:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 8001464:	23a0      	movs	r3, #160	; 0xa0
 8001466:	05db      	lsls	r3, r3, #23
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	23a0      	movs	r3, #160	; 0xa0
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	2120      	movs	r1, #32
 8001470:	438a      	bics	r2, r1
 8001472:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 12); // PA12
 8001474:	23a0      	movs	r3, #160	; 0xa0
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	23a0      	movs	r3, #160	; 0xa0
 800147c:	05db      	lsls	r3, r3, #23
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	0149      	lsls	r1, r1, #5
 8001482:	430a      	orrs	r2, r1
 8001484:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 11); // PA11
 8001486:	23a0      	movs	r3, #160	; 0xa0
 8001488:	05db      	lsls	r3, r3, #23
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	23a0      	movs	r3, #160	; 0xa0
 800148e:	05db      	lsls	r3, r3, #23
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0109      	lsls	r1, r1, #4
 8001494:	430a      	orrs	r2, r1
 8001496:	615a      	str	r2, [r3, #20]
			break;
 8001498:	e118      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 31: //L
			GPIOB->ODR |=  ( 1U << 3); // PB3
 800149a:	4b8e      	ldr	r3, [pc, #568]	; (80016d4 <printDigit_SSD+0x9e8>)
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	4b8d      	ldr	r3, [pc, #564]	; (80016d4 <printDigit_SSD+0x9e8>)
 80014a0:	2108      	movs	r1, #8
 80014a2:	430a      	orrs	r2, r1
 80014a4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 0); // PA0
 80014a6:	23a0      	movs	r3, #160	; 0xa0
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	23a0      	movs	r3, #160	; 0xa0
 80014ae:	05db      	lsls	r3, r3, #23
 80014b0:	2101      	movs	r1, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 1); // PA1
 80014b6:	23a0      	movs	r3, #160	; 0xa0
 80014b8:	05db      	lsls	r3, r3, #23
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	23a0      	movs	r3, #160	; 0xa0
 80014be:	05db      	lsls	r3, r3, #23
 80014c0:	2102      	movs	r1, #2
 80014c2:	430a      	orrs	r2, r1
 80014c4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 80014c6:	23a0      	movs	r3, #160	; 0xa0
 80014c8:	05db      	lsls	r3, r3, #23
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	23a0      	movs	r3, #160	; 0xa0
 80014ce:	05db      	lsls	r3, r3, #23
 80014d0:	2110      	movs	r1, #16
 80014d2:	438a      	bics	r2, r1
 80014d4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 80014d6:	23a0      	movs	r3, #160	; 0xa0
 80014d8:	05db      	lsls	r3, r3, #23
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	23a0      	movs	r3, #160	; 0xa0
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	2120      	movs	r1, #32
 80014e2:	438a      	bics	r2, r1
 80014e4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 12); // PA12
 80014e6:	23a0      	movs	r3, #160	; 0xa0
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	23a0      	movs	r3, #160	; 0xa0
 80014ee:	05db      	lsls	r3, r3, #23
 80014f0:	4979      	ldr	r1, [pc, #484]	; (80016d8 <printDigit_SSD+0x9ec>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 11); // PA11
 80014f6:	23a0      	movs	r3, #160	; 0xa0
 80014f8:	05db      	lsls	r3, r3, #23
 80014fa:	695a      	ldr	r2, [r3, #20]
 80014fc:	23a0      	movs	r3, #160	; 0xa0
 80014fe:	05db      	lsls	r3, r3, #23
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	0109      	lsls	r1, r1, #4
 8001504:	430a      	orrs	r2, r1
 8001506:	615a      	str	r2, [r3, #20]
			break;
 8001508:	e0e0      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 32: //n
			GPIOB->ODR |=  ( 1U << 3); // PB3
 800150a:	4b72      	ldr	r3, [pc, #456]	; (80016d4 <printDigit_SSD+0x9e8>)
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	4b71      	ldr	r3, [pc, #452]	; (80016d4 <printDigit_SSD+0x9e8>)
 8001510:	2108      	movs	r1, #8
 8001512:	430a      	orrs	r2, r1
 8001514:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 0); // PA0
 8001516:	23a0      	movs	r3, #160	; 0xa0
 8001518:	05db      	lsls	r3, r3, #23
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	23a0      	movs	r3, #160	; 0xa0
 800151e:	05db      	lsls	r3, r3, #23
 8001520:	2101      	movs	r1, #1
 8001522:	430a      	orrs	r2, r1
 8001524:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 8001526:	23a0      	movs	r3, #160	; 0xa0
 8001528:	05db      	lsls	r3, r3, #23
 800152a:	695a      	ldr	r2, [r3, #20]
 800152c:	23a0      	movs	r3, #160	; 0xa0
 800152e:	05db      	lsls	r3, r3, #23
 8001530:	2102      	movs	r1, #2
 8001532:	438a      	bics	r2, r1
 8001534:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 4); // PA4
 8001536:	23a0      	movs	r3, #160	; 0xa0
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	23a0      	movs	r3, #160	; 0xa0
 800153e:	05db      	lsls	r3, r3, #23
 8001540:	2110      	movs	r1, #16
 8001542:	430a      	orrs	r2, r1
 8001544:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 8001546:	23a0      	movs	r3, #160	; 0xa0
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	23a0      	movs	r3, #160	; 0xa0
 800154e:	05db      	lsls	r3, r3, #23
 8001550:	2120      	movs	r1, #32
 8001552:	438a      	bics	r2, r1
 8001554:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 12); // PA12
 8001556:	23a0      	movs	r3, #160	; 0xa0
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	23a0      	movs	r3, #160	; 0xa0
 800155e:	05db      	lsls	r3, r3, #23
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	0149      	lsls	r1, r1, #5
 8001564:	430a      	orrs	r2, r1
 8001566:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	05db      	lsls	r3, r3, #23
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	23a0      	movs	r3, #160	; 0xa0
 8001570:	05db      	lsls	r3, r3, #23
 8001572:	495a      	ldr	r1, [pc, #360]	; (80016dc <printDigit_SSD+0x9f0>)
 8001574:	400a      	ands	r2, r1
 8001576:	615a      	str	r2, [r3, #20]
			break;
 8001578:	e0a8      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 33: //D
			GPIOB->ODR |=  ( 1U << 3); // PB3
 800157a:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <printDigit_SSD+0x9e8>)
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	4b55      	ldr	r3, [pc, #340]	; (80016d4 <printDigit_SSD+0x9e8>)
 8001580:	2108      	movs	r1, #8
 8001582:	430a      	orrs	r2, r1
 8001584:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 0); // PA0
 8001586:	23a0      	movs	r3, #160	; 0xa0
 8001588:	05db      	lsls	r3, r3, #23
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	23a0      	movs	r3, #160	; 0xa0
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	2101      	movs	r1, #1
 8001592:	438a      	bics	r2, r1
 8001594:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 1); // PA1
 8001596:	23a0      	movs	r3, #160	; 0xa0
 8001598:	05db      	lsls	r3, r3, #23
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	23a0      	movs	r3, #160	; 0xa0
 800159e:	05db      	lsls	r3, r3, #23
 80015a0:	2102      	movs	r1, #2
 80015a2:	438a      	bics	r2, r1
 80015a4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 4); // PA4
 80015a6:	23a0      	movs	r3, #160	; 0xa0
 80015a8:	05db      	lsls	r3, r3, #23
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	23a0      	movs	r3, #160	; 0xa0
 80015ae:	05db      	lsls	r3, r3, #23
 80015b0:	2110      	movs	r1, #16
 80015b2:	438a      	bics	r2, r1
 80015b4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 5); // PA5
 80015b6:	23a0      	movs	r3, #160	; 0xa0
 80015b8:	05db      	lsls	r3, r3, #23
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	23a0      	movs	r3, #160	; 0xa0
 80015be:	05db      	lsls	r3, r3, #23
 80015c0:	2120      	movs	r1, #32
 80015c2:	438a      	bics	r2, r1
 80015c4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |=  ( 1U << 12); // PA12
 80015c6:	23a0      	movs	r3, #160	; 0xa0
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	23a0      	movs	r3, #160	; 0xa0
 80015ce:	05db      	lsls	r3, r3, #23
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	0149      	lsls	r1, r1, #5
 80015d4:	430a      	orrs	r2, r1
 80015d6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 80015d8:	23a0      	movs	r3, #160	; 0xa0
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	23a0      	movs	r3, #160	; 0xa0
 80015e0:	05db      	lsls	r3, r3, #23
 80015e2:	493e      	ldr	r1, [pc, #248]	; (80016dc <printDigit_SSD+0x9f0>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	615a      	str	r2, [r3, #20]
			break;
 80015e8:	e070      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 34: // negative sign
			GPIOB->ODR |= ( 1U << 3); // PB3
 80015ea:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <printDigit_SSD+0x9e8>)
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <printDigit_SSD+0x9e8>)
 80015f0:	2108      	movs	r1, #8
 80015f2:	430a      	orrs	r2, r1
 80015f4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 0); // PA0
 80015f6:	23a0      	movs	r3, #160	; 0xa0
 80015f8:	05db      	lsls	r3, r3, #23
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	23a0      	movs	r3, #160	; 0xa0
 80015fe:	05db      	lsls	r3, r3, #23
 8001600:	2101      	movs	r1, #1
 8001602:	430a      	orrs	r2, r1
 8001604:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 1); // PA1
 8001606:	23a0      	movs	r3, #160	; 0xa0
 8001608:	05db      	lsls	r3, r3, #23
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	23a0      	movs	r3, #160	; 0xa0
 800160e:	05db      	lsls	r3, r3, #23
 8001610:	2102      	movs	r1, #2
 8001612:	430a      	orrs	r2, r1
 8001614:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 4); // PA4
 8001616:	23a0      	movs	r3, #160	; 0xa0
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	23a0      	movs	r3, #160	; 0xa0
 800161e:	05db      	lsls	r3, r3, #23
 8001620:	2110      	movs	r1, #16
 8001622:	430a      	orrs	r2, r1
 8001624:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 5); // PA5
 8001626:	23a0      	movs	r3, #160	; 0xa0
 8001628:	05db      	lsls	r3, r3, #23
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	23a0      	movs	r3, #160	; 0xa0
 800162e:	05db      	lsls	r3, r3, #23
 8001630:	2120      	movs	r1, #32
 8001632:	430a      	orrs	r2, r1
 8001634:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 12); // PA12
 8001636:	23a0      	movs	r3, #160	; 0xa0
 8001638:	05db      	lsls	r3, r3, #23
 800163a:	695a      	ldr	r2, [r3, #20]
 800163c:	23a0      	movs	r3, #160	; 0xa0
 800163e:	05db      	lsls	r3, r3, #23
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0149      	lsls	r1, r1, #5
 8001644:	430a      	orrs	r2, r1
 8001646:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~( 1U << 11); // PA11
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	23a0      	movs	r3, #160	; 0xa0
 8001650:	05db      	lsls	r3, r3, #23
 8001652:	4922      	ldr	r1, [pc, #136]	; (80016dc <printDigit_SSD+0x9f0>)
 8001654:	400a      	ands	r2, r1
 8001656:	615a      	str	r2, [r3, #20]
			break;
 8001658:	e038      	b.n	80016cc <printDigit_SSD+0x9e0>

		case 35: // space
			GPIOB->ODR |= ( 1U << 3); // PB3
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <printDigit_SSD+0x9e8>)
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <printDigit_SSD+0x9e8>)
 8001660:	2108      	movs	r1, #8
 8001662:	430a      	orrs	r2, r1
 8001664:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 0); // PA0
 8001666:	23a0      	movs	r3, #160	; 0xa0
 8001668:	05db      	lsls	r3, r3, #23
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	23a0      	movs	r3, #160	; 0xa0
 800166e:	05db      	lsls	r3, r3, #23
 8001670:	2101      	movs	r1, #1
 8001672:	430a      	orrs	r2, r1
 8001674:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 1); // PA1
 8001676:	23a0      	movs	r3, #160	; 0xa0
 8001678:	05db      	lsls	r3, r3, #23
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	23a0      	movs	r3, #160	; 0xa0
 800167e:	05db      	lsls	r3, r3, #23
 8001680:	2102      	movs	r1, #2
 8001682:	430a      	orrs	r2, r1
 8001684:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 4); // PA4
 8001686:	23a0      	movs	r3, #160	; 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	695a      	ldr	r2, [r3, #20]
 800168c:	23a0      	movs	r3, #160	; 0xa0
 800168e:	05db      	lsls	r3, r3, #23
 8001690:	2110      	movs	r1, #16
 8001692:	430a      	orrs	r2, r1
 8001694:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 5); // PA5
 8001696:	23a0      	movs	r3, #160	; 0xa0
 8001698:	05db      	lsls	r3, r3, #23
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	23a0      	movs	r3, #160	; 0xa0
 800169e:	05db      	lsls	r3, r3, #23
 80016a0:	2120      	movs	r1, #32
 80016a2:	430a      	orrs	r2, r1
 80016a4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 12); // PA12
 80016a6:	23a0      	movs	r3, #160	; 0xa0
 80016a8:	05db      	lsls	r3, r3, #23
 80016aa:	695a      	ldr	r2, [r3, #20]
 80016ac:	23a0      	movs	r3, #160	; 0xa0
 80016ae:	05db      	lsls	r3, r3, #23
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0149      	lsls	r1, r1, #5
 80016b4:	430a      	orrs	r2, r1
 80016b6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= ( 1U << 11); // PA11
 80016b8:	23a0      	movs	r3, #160	; 0xa0
 80016ba:	05db      	lsls	r3, r3, #23
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	23a0      	movs	r3, #160	; 0xa0
 80016c0:	05db      	lsls	r3, r3, #23
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	0109      	lsls	r1, r1, #4
 80016c6:	430a      	orrs	r2, r1
 80016c8:	615a      	str	r2, [r3, #20]
			break;
 80016ca:	46c0      	nop			; (mov r8, r8)
		}
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	50000400 	.word	0x50000400
 80016d8:	ffffefff 	.word	0xffffefff
 80016dc:	fffff7ff 	.word	0xfffff7ff

080016e0 <read_ee>:

#include "eeprom.h"
#include "string.h"
#include "stdlib.h"

void read_ee(uint16_t regAddr, uint8_t *data, uint32_t num){
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	210e      	movs	r1, #14
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	1c02      	adds	r2, r0, #0
 80016f0:	801a      	strh	r2, [r3, #0]
	uint8_t devAddr = 0x50;
 80016f2:	2017      	movs	r0, #23
 80016f4:	183b      	adds	r3, r7, r0
 80016f6:	2250      	movs	r2, #80	; 0x50
 80016f8:	701a      	strb	r2, [r3, #0]
	uint8_t arr[2];
	arr[0] = (uint8_t)(regAddr >> 8);
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	b29b      	uxth	r3, r3
 8001702:	b2da      	uxtb	r2, r3
 8001704:	2414      	movs	r4, #20
 8001706:	193b      	adds	r3, r7, r4
 8001708:	701a      	strb	r2, [r3, #0]
	arr[1] = (uint8_t)(regAddr & 0x00FF);
 800170a:	187b      	adds	r3, r7, r1
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	193b      	adds	r3, r7, r4
 8001712:	705a      	strb	r2, [r3, #1]
	write_general(devAddr, arr, 2);
 8001714:	1939      	adds	r1, r7, r4
 8001716:	0004      	movs	r4, r0
 8001718:	183b      	adds	r3, r7, r0
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2202      	movs	r2, #2
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff f97a 	bl	8000a18 <write_general>
	read_general(devAddr, data, num);
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	0020      	movs	r0, r4
 800172a:	183b      	adds	r3, r7, r0
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff f9c0 	bl	8000ab4 <read_general>
}
 8001734:	46c0      	nop			; (mov r8, r8)
 8001736:	46bd      	mov	sp, r7
 8001738:	b007      	add	sp, #28
 800173a:	bd90      	pop	{r4, r7, pc}

0800173c <write_ee>:

void write_ee(uint16_t regAddr, uint8_t *data, uint32_t num){
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	210e      	movs	r1, #14
 8001748:	187b      	adds	r3, r7, r1
 800174a:	1c02      	adds	r2, r0, #0
 800174c:	801a      	strh	r2, [r3, #0]
	uint8_t devAddr = 0x50;
 800174e:	251f      	movs	r5, #31
 8001750:	197b      	adds	r3, r7, r5
 8001752:	2250      	movs	r2, #80	; 0x50
 8001754:	701a      	strb	r2, [r3, #0]
	uint8_t arr[2];
	arr[0] = (uint8_t)(regAddr >> 8);
 8001756:	187b      	adds	r3, r7, r1
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	b29b      	uxth	r3, r3
 800175e:	b2da      	uxtb	r2, r3
 8001760:	2014      	movs	r0, #20
 8001762:	183b      	adds	r3, r7, r0
 8001764:	701a      	strb	r2, [r3, #0]
	arr[1] = (uint8_t)(regAddr & 0x00FF);
 8001766:	187b      	adds	r3, r7, r1
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	0004      	movs	r4, r0
 800176e:	183b      	adds	r3, r7, r0
 8001770:	705a      	strb	r2, [r3, #1]
	uint8_t *ARR;
	ARR = (uint8_t*)malloc((num+2));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3302      	adds	r3, #2
 8001776:	0018      	movs	r0, r3
 8001778:	f000 faba 	bl	8001cf0 <malloc>
 800177c:	0003      	movs	r3, r0
 800177e:	61bb      	str	r3, [r7, #24]
	memcpy(ARR, arr, 2);
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	0020      	movs	r0, r4
 8001784:	183b      	adds	r3, r7, r0
 8001786:	0010      	movs	r0, r2
 8001788:	0019      	movs	r1, r3
 800178a:	2302      	movs	r3, #2
 800178c:	001a      	movs	r2, r3
 800178e:	f000 fac3 	bl	8001d18 <memcpy>
	memcpy(ARR+2, data, num);
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	3302      	adds	r3, #2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	0018      	movs	r0, r3
 800179c:	f000 fabc 	bl	8001d18 <memcpy>
	write_general(devAddr, ARR, num+2);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	1c9a      	adds	r2, r3, #2
 80017a4:	69b9      	ldr	r1, [r7, #24]
 80017a6:	197b      	adds	r3, r7, r5
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7ff f934 	bl	8000a18 <write_general>
	free(ARR);
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	0018      	movs	r0, r3
 80017b4:	f000 faa6 	bl	8001d04 <free>
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b008      	add	sp, #32
 80017be:	bdb0      	pop	{r4, r5, r7, pc}

080017c0 <EXTI0_1_IRQHandler>:
	    NVIC_SetPriority(EXTI4_15_IRQn,0);
	    NVIC_EnableIRQ(EXTI4_15_IRQn);

}
/* interrut for PB0*/
void EXTI0_1_IRQHandler(void){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	if (EXTI->RPR1 & (1U << 0)){// check if pending register equal 1
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <EXTI0_1_IRQHandler+0xd8>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	d061      	beq.n	8001892 <EXTI0_1_IRQHandler+0xd2>

		clear_rows_keypad();
 80017ce:	f000 f9c3 	bl	8001b58 <clear_rows_keypad>
		/* make PA8 enable*/
		GPIOA->ODR ^=( 1U << 8);
 80017d2:	23a0      	movs	r3, #160	; 0xa0
 80017d4:	05db      	lsls	r3, r3, #23
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	23a0      	movs	r3, #160	; 0xa0
 80017da:	05db      	lsls	r3, r3, #23
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	0049      	lsls	r1, r1, #1
 80017e0:	404a      	eors	r2, r1
 80017e2:	615a      	str	r2, [r3, #20]
		if ((GPIOB->IDR >> 0) & 1){//check if PB0 equal 1
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	d002      	beq.n	80017f4 <EXTI0_1_IRQHandler+0x34>
			/* #=(F) character*/
			Keypad_data(15);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f000 f9fc 	bl	8001bec <Keypad_data>

		}
		/*make PA8 disable*/
		GPIOA->ODR ^=( 1U << 8); // PA8
 80017f4:	23a0      	movs	r3, #160	; 0xa0
 80017f6:	05db      	lsls	r3, r3, #23
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	23a0      	movs	r3, #160	; 0xa0
 80017fc:	05db      	lsls	r3, r3, #23
 80017fe:	2180      	movs	r1, #128	; 0x80
 8001800:	0049      	lsls	r1, r1, #1
 8001802:	404a      	eors	r2, r1
 8001804:	615a      	str	r2, [r3, #20]

		/* make PB9 enable*/
		GPIOB->ODR ^=( 1U << 9); // PB9
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	0089      	lsls	r1, r1, #2
 8001810:	404a      	eors	r2, r1
 8001812:	615a      	str	r2, [r3, #20]
		if ((GPIOB->IDR >> 0) & 1){
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	2201      	movs	r2, #1
 800181a:	4013      	ands	r3, r2
 800181c:	d002      	beq.n	8001824 <EXTI0_1_IRQHandler+0x64>
			/* 9 character*/
			Keypad_data(9);
 800181e:	2009      	movs	r0, #9
 8001820:	f000 f9e4 	bl	8001bec <Keypad_data>

		}
		/* make PB9 disable*/
		GPIOB->ODR ^=( 1U << 9); // PB9
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0089      	lsls	r1, r1, #2
 800182e:	404a      	eors	r2, r1
 8001830:	615a      	str	r2, [r3, #20]

		/* make PB5 enable*/
		GPIOB->ODR ^=( 1U << 5); // PB5
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001838:	2120      	movs	r1, #32
 800183a:	404a      	eors	r2, r1
 800183c:	615a      	str	r2, [r3, #20]
		if ((GPIOB->IDR >> 0) & 1){
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2201      	movs	r2, #1
 8001844:	4013      	ands	r3, r2
 8001846:	d002      	beq.n	800184e <EXTI0_1_IRQHandler+0x8e>
			/* 6 character*/
			Keypad_data(6);
 8001848:	2006      	movs	r0, #6
 800184a:	f000 f9cf 	bl	8001bec <Keypad_data>

		}
		/* make PB5 disable*/
		GPIOB->ODR ^=( 1U << 5); // PB5
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001854:	2120      	movs	r1, #32
 8001856:	404a      	eors	r2, r1
 8001858:	615a      	str	r2, [r3, #20]

		/* make PB4 enable*/
		GPIOB->ODR ^=( 1U << 4); // PB4
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001860:	2110      	movs	r1, #16
 8001862:	404a      	eors	r2, r1
 8001864:	615a      	str	r2, [r3, #20]
		if ((GPIOB->IDR >> 0) & 1){
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2201      	movs	r2, #1
 800186c:	4013      	ands	r3, r2
 800186e:	d002      	beq.n	8001876 <EXTI0_1_IRQHandler+0xb6>
			/* 3 character*/
			Keypad_data(3);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 f9bb 	bl	8001bec <Keypad_data>

		}
		/* make PB4 disable*/
		GPIOB->ODR ^=( 1U << 4); // PB4
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <EXTI0_1_IRQHandler+0xdc>)
 800187c:	2110      	movs	r1, #16
 800187e:	404a      	eors	r2, r1
 8001880:	615a      	str	r2, [r3, #20]


		set_rows_keypad();
 8001882:	f000 f98f 	bl	8001ba4 <set_rows_keypad>
		/*clear interrupt for clear pending register */
		EXTI->RPR1 |= (1U << 0);
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <EXTI0_1_IRQHandler+0xd8>)
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	4b03      	ldr	r3, [pc, #12]	; (8001898 <EXTI0_1_IRQHandler+0xd8>)
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	60da      	str	r2, [r3, #12]
	}
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021800 	.word	0x40021800
 800189c:	50000400 	.word	0x50000400

080018a0 <EXTI2_3_IRQHandler>:

/* interrut for PB2*/
void EXTI2_3_IRQHandler(void){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

	if (EXTI->RPR1 & (1U << 2)){// check if pending register equal 1
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <EXTI2_3_IRQHandler+0xe0>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2204      	movs	r2, #4
 80018aa:	4013      	ands	r3, r2
 80018ac:	d065      	beq.n	800197a <EXTI2_3_IRQHandler+0xda>

		clear_rows_keypad();
 80018ae:	f000 f953 	bl	8001b58 <clear_rows_keypad>
		/*make PA8 enable*/
		GPIOA->ODR ^=( 1U << 8); // PA8
 80018b2:	23a0      	movs	r3, #160	; 0xa0
 80018b4:	05db      	lsls	r3, r3, #23
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	23a0      	movs	r3, #160	; 0xa0
 80018ba:	05db      	lsls	r3, r3, #23
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0049      	lsls	r1, r1, #1
 80018c0:	404a      	eors	r2, r1
 80018c2:	615a      	str	r2, [r3, #20]
		if ((GPIOB ->IDR >> 2) & 1){//check if PB2 equal 1
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d002      	beq.n	80018d6 <EXTI2_3_IRQHandler+0x36>
			/* D character*/
			Keypad_data(13);
 80018d0:	200d      	movs	r0, #13
 80018d2:	f000 f98b 	bl	8001bec <Keypad_data>

		}
		/*make PA8 disable*/
		GPIOA->ODR ^=( 1U << 8); // PA8
 80018d6:	23a0      	movs	r3, #160	; 0xa0
 80018d8:	05db      	lsls	r3, r3, #23
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	23a0      	movs	r3, #160	; 0xa0
 80018de:	05db      	lsls	r3, r3, #23
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	0049      	lsls	r1, r1, #1
 80018e4:	404a      	eors	r2, r1
 80018e6:	615a      	str	r2, [r3, #20]

		/* make PB9 enable*/
		GPIOB->ODR ^=( 1U << 9); // PB9
 80018e8:	4b26      	ldr	r3, [pc, #152]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0089      	lsls	r1, r1, #2
 80018f2:	404a      	eors	r2, r1
 80018f4:	615a      	str	r2, [r3, #20]
		if ((GPIOB ->IDR >> 2) & 1){
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	2201      	movs	r2, #1
 80018fe:	4013      	ands	r3, r2
 8001900:	d002      	beq.n	8001908 <EXTI2_3_IRQHandler+0x68>
			/* C character*/
			Keypad_data(12);
 8001902:	200c      	movs	r0, #12
 8001904:	f000 f972 	bl	8001bec <Keypad_data>

		}
		/* make PB9 disable*/
		GPIOB->ODR ^=( 1U << 9); // PB9
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	0089      	lsls	r1, r1, #2
 8001912:	404a      	eors	r2, r1
 8001914:	615a      	str	r2, [r3, #20]

		/* make PB5 enable*/
		GPIOB->ODR ^=( 1U << 5); // PB5
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 800191c:	2120      	movs	r1, #32
 800191e:	404a      	eors	r2, r1
 8001920:	615a      	str	r2, [r3, #20]
		if ((GPIOB ->IDR >> 2) & 1){
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	2201      	movs	r2, #1
 800192a:	4013      	ands	r3, r2
 800192c:	d002      	beq.n	8001934 <EXTI2_3_IRQHandler+0x94>
			/* B character*/
			Keypad_data(11);
 800192e:	200b      	movs	r0, #11
 8001930:	f000 f95c 	bl	8001bec <Keypad_data>

		}
		/* make PB5 disable*/
		GPIOB->ODR ^=( 1U << 5); // PB5
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 800193a:	2120      	movs	r1, #32
 800193c:	404a      	eors	r2, r1
 800193e:	615a      	str	r2, [r3, #20]

		/* make PB4 enable*/
		GPIOB->ODR ^=( 1U << 4); // PB4
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 8001946:	2110      	movs	r1, #16
 8001948:	404a      	eors	r2, r1
 800194a:	615a      	str	r2, [r3, #20]
		if ((GPIOB ->IDR >> 2) & 1){
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	d002      	beq.n	800195e <EXTI2_3_IRQHandler+0xbe>
			/* A character*/
			Keypad_data(10);
 8001958:	200a      	movs	r0, #10
 800195a:	f000 f947 	bl	8001bec <Keypad_data>

		}
		/* make PB4 disable*/
		GPIOB->ODR ^=( 1U << 4); // PB4
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <EXTI2_3_IRQHandler+0xe4>)
 8001964:	2110      	movs	r1, #16
 8001966:	404a      	eors	r2, r1
 8001968:	615a      	str	r2, [r3, #20]


		set_rows_keypad();
 800196a:	f000 f91b 	bl	8001ba4 <set_rows_keypad>
		/*clear interrupt for clear pending register */
		EXTI->RPR1 |= (1U << 2);
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <EXTI2_3_IRQHandler+0xe0>)
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	4b03      	ldr	r3, [pc, #12]	; (8001980 <EXTI2_3_IRQHandler+0xe0>)
 8001974:	2104      	movs	r1, #4
 8001976:	430a      	orrs	r2, r1
 8001978:	60da      	str	r2, [r3, #12]
	}
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021800 	.word	0x40021800
 8001984:	50000400 	.word	0x50000400

08001988 <EXTI4_15_IRQHandler>:

/* interrut for PB8 and PA9*/
void EXTI4_15_IRQHandler(void){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

			/*interrut for PB8*/
		if (EXTI->RPR1 & (1U << 8)){// check if pending register equal 1
 800198c:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <EXTI4_15_IRQHandler+0x1c8>)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d066      	beq.n	8001a66 <EXTI4_15_IRQHandler+0xde>
			clear_rows_keypad();
 8001998:	f000 f8de 	bl	8001b58 <clear_rows_keypad>
			/*make PA8 enable*/
			GPIOA->ODR ^=( 1U << 8); // PA8
 800199c:	23a0      	movs	r3, #160	; 0xa0
 800199e:	05db      	lsls	r3, r3, #23
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	23a0      	movs	r3, #160	; 0xa0
 80019a4:	05db      	lsls	r3, r3, #23
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	0049      	lsls	r1, r1, #1
 80019aa:	404a      	eors	r2, r1
 80019ac:	615a      	str	r2, [r3, #20]
			if ((GPIOB ->IDR >> 8) & 1){//check if PB8 equal 1
 80019ae:	4b69      	ldr	r3, [pc, #420]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	2201      	movs	r2, #1
 80019b6:	4013      	ands	r3, r2
 80019b8:	d002      	beq.n	80019c0 <EXTI4_15_IRQHandler+0x38>
				/* *(E) character*/
				Keypad_data(14);
 80019ba:	200e      	movs	r0, #14
 80019bc:	f000 f916 	bl	8001bec <Keypad_data>

			}
			/*make PA8 disable*/
			GPIOA->ODR ^=( 1U << 8); // PA8
 80019c0:	23a0      	movs	r3, #160	; 0xa0
 80019c2:	05db      	lsls	r3, r3, #23
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	23a0      	movs	r3, #160	; 0xa0
 80019c8:	05db      	lsls	r3, r3, #23
 80019ca:	2180      	movs	r1, #128	; 0x80
 80019cc:	0049      	lsls	r1, r1, #1
 80019ce:	404a      	eors	r2, r1
 80019d0:	615a      	str	r2, [r3, #20]

			/* make PB9 enable*/
			GPIOB->ODR ^=( 1U << 9); // PB9
 80019d2:	4b60      	ldr	r3, [pc, #384]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	4b5f      	ldr	r3, [pc, #380]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	0089      	lsls	r1, r1, #2
 80019dc:	404a      	eors	r2, r1
 80019de:	615a      	str	r2, [r3, #20]
			if ((GPIOB ->IDR >> 8) & 1){
 80019e0:	4b5c      	ldr	r3, [pc, #368]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	2201      	movs	r2, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	d002      	beq.n	80019f2 <EXTI4_15_IRQHandler+0x6a>
				/* 7 character*/
				Keypad_data(7);
 80019ec:	2007      	movs	r0, #7
 80019ee:	f000 f8fd 	bl	8001bec <Keypad_data>

			}
			/* make PB9 disable*/
			GPIOB->ODR ^=( 1U << 9); // PB9
 80019f2:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	4b57      	ldr	r3, [pc, #348]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0089      	lsls	r1, r1, #2
 80019fc:	404a      	eors	r2, r1
 80019fe:	615a      	str	r2, [r3, #20]

			/* make PB5 enable*/
			GPIOB->ODR ^=( 1U << 5); // PB5
 8001a00:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001a06:	2120      	movs	r1, #32
 8001a08:	404a      	eors	r2, r1
 8001a0a:	615a      	str	r2, [r3, #20]
			if ((GPIOB ->IDR >> 8) & 1){
 8001a0c:	4b51      	ldr	r3, [pc, #324]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	2201      	movs	r2, #1
 8001a14:	4013      	ands	r3, r2
 8001a16:	d002      	beq.n	8001a1e <EXTI4_15_IRQHandler+0x96>
				/* 4 character*/
				Keypad_data(4);
 8001a18:	2004      	movs	r0, #4
 8001a1a:	f000 f8e7 	bl	8001bec <Keypad_data>

			}
			/* make PB5 disable*/
			GPIOB->ODR ^=( 1U << 5); // PB5
 8001a1e:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001a24:	2120      	movs	r1, #32
 8001a26:	404a      	eors	r2, r1
 8001a28:	615a      	str	r2, [r3, #20]

			/* make PB4 enable*/
			GPIOB->ODR ^=( 1U << 4); // PB4
 8001a2a:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	4b49      	ldr	r3, [pc, #292]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001a30:	2110      	movs	r1, #16
 8001a32:	404a      	eors	r2, r1
 8001a34:	615a      	str	r2, [r3, #20]
			if ((GPIOB ->IDR >> 8) & 1){
 8001a36:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d002      	beq.n	8001a48 <EXTI4_15_IRQHandler+0xc0>
				/* 1 character*/
				Keypad_data(1);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f000 f8d2 	bl	8001bec <Keypad_data>

			}
			/* make PB4 disable*/
			GPIOB->ODR ^=( 1U << 4); // PB4
 8001a48:	4b42      	ldr	r3, [pc, #264]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001a4e:	2110      	movs	r1, #16
 8001a50:	404a      	eors	r2, r1
 8001a52:	615a      	str	r2, [r3, #20]


			set_rows_keypad();
 8001a54:	f000 f8a6 	bl	8001ba4 <set_rows_keypad>
			/*clear interrupt for clear pending register */
			EXTI->RPR1 |= (1U << 8);
 8001a58:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <EXTI4_15_IRQHandler+0x1c8>)
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	4b3c      	ldr	r3, [pc, #240]	; (8001b50 <EXTI4_15_IRQHandler+0x1c8>)
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	0049      	lsls	r1, r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]
		}

		/*interrut for PA9*/
		if (EXTI->RPR1 & (1U << 9)){// check if pending register equal 1
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <EXTI4_15_IRQHandler+0x1c8>)
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d06a      	beq.n	8001b48 <EXTI4_15_IRQHandler+0x1c0>
			clear_rows_keypad();
 8001a72:	f000 f871 	bl	8001b58 <clear_rows_keypad>
			/*make PA8 enable*/
			GPIOA->ODR ^=( 1U << 8); //check if PA8 equal 1
 8001a76:	23a0      	movs	r3, #160	; 0xa0
 8001a78:	05db      	lsls	r3, r3, #23
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	23a0      	movs	r3, #160	; 0xa0
 8001a7e:	05db      	lsls	r3, r3, #23
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	0049      	lsls	r1, r1, #1
 8001a84:	404a      	eors	r2, r1
 8001a86:	615a      	str	r2, [r3, #20]
			if ((GPIOA ->IDR >> 9) & 1){
 8001a88:	23a0      	movs	r3, #160	; 0xa0
 8001a8a:	05db      	lsls	r3, r3, #23
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	0a5b      	lsrs	r3, r3, #9
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	d002      	beq.n	8001a9c <EXTI4_15_IRQHandler+0x114>
				/* 0 character*/
				Keypad_data(0);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f8a8 	bl	8001bec <Keypad_data>

			}
			/*make PA8 disable*/
			GPIOA->ODR ^=( 1U << 8); // PA8
 8001a9c:	23a0      	movs	r3, #160	; 0xa0
 8001a9e:	05db      	lsls	r3, r3, #23
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	23a0      	movs	r3, #160	; 0xa0
 8001aa4:	05db      	lsls	r3, r3, #23
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	0049      	lsls	r1, r1, #1
 8001aaa:	404a      	eors	r2, r1
 8001aac:	615a      	str	r2, [r3, #20]

			/* make PB9 enable*/
			GPIOB->ODR ^=( 1U << 9); // PB9
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	0089      	lsls	r1, r1, #2
 8001ab8:	404a      	eors	r2, r1
 8001aba:	615a      	str	r2, [r3, #20]
			if ((GPIOA ->IDR >> 9) & 1){
 8001abc:	23a0      	movs	r3, #160	; 0xa0
 8001abe:	05db      	lsls	r3, r3, #23
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	0a5b      	lsrs	r3, r3, #9
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d002      	beq.n	8001ad0 <EXTI4_15_IRQHandler+0x148>
				/* 8 character*/
				Keypad_data(8);
 8001aca:	2008      	movs	r0, #8
 8001acc:	f000 f88e 	bl	8001bec <Keypad_data>

			}
			/* make PB9 disable*/
			GPIOB->ODR ^=( 1U << 9); // PB9
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	0089      	lsls	r1, r1, #2
 8001ada:	404a      	eors	r2, r1
 8001adc:	615a      	str	r2, [r3, #20]

			/* make PB5 enable*/
			GPIOB->ODR ^=( 1U << 5); // PB5
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001ae4:	2120      	movs	r1, #32
 8001ae6:	404a      	eors	r2, r1
 8001ae8:	615a      	str	r2, [r3, #20]
			if ((GPIOA ->IDR >> 9) & 1){
 8001aea:	23a0      	movs	r3, #160	; 0xa0
 8001aec:	05db      	lsls	r3, r3, #23
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	0a5b      	lsrs	r3, r3, #9
 8001af2:	2201      	movs	r2, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	d002      	beq.n	8001afe <EXTI4_15_IRQHandler+0x176>
				/* 5 character*/
				Keypad_data(5);
 8001af8:	2005      	movs	r0, #5
 8001afa:	f000 f877 	bl	8001bec <Keypad_data>

			}
			/* make PB5 disable*/
			GPIOB->ODR ^=( 1U << 5); // PB5
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001b04:	2120      	movs	r1, #32
 8001b06:	404a      	eors	r2, r1
 8001b08:	615a      	str	r2, [r3, #20]

			/* make PB4 enable*/
			GPIOB->ODR ^=( 1U << 4); // PB4
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001b10:	2110      	movs	r1, #16
 8001b12:	404a      	eors	r2, r1
 8001b14:	615a      	str	r2, [r3, #20]
			if ((GPIOA ->IDR >> 9) & 1){
 8001b16:	23a0      	movs	r3, #160	; 0xa0
 8001b18:	05db      	lsls	r3, r3, #23
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	0a5b      	lsrs	r3, r3, #9
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	d002      	beq.n	8001b2a <EXTI4_15_IRQHandler+0x1a2>
				/* 2 character*/
				Keypad_data(2);
 8001b24:	2002      	movs	r0, #2
 8001b26:	f000 f861 	bl	8001bec <Keypad_data>

			}
			/* make PB4 disable*/
			GPIOB->ODR ^=( 1U << 4); // PB4
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <EXTI4_15_IRQHandler+0x1cc>)
 8001b30:	2110      	movs	r1, #16
 8001b32:	404a      	eors	r2, r1
 8001b34:	615a      	str	r2, [r3, #20]


			set_rows_keypad();
 8001b36:	f000 f835 	bl	8001ba4 <set_rows_keypad>

			/*clear interrupt for clear pending register */
			EXTI->RPR1 |= (1U << 9);
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <EXTI4_15_IRQHandler+0x1c8>)
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <EXTI4_15_IRQHandler+0x1c8>)
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	0089      	lsls	r1, r1, #2
 8001b44:	430a      	orrs	r2, r1
 8001b46:	60da      	str	r2, [r3, #12]
		}

}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	40021800 	.word	0x40021800
 8001b54:	50000400 	.word	0x50000400

08001b58 <clear_rows_keypad>:


void clear_rows_keypad(void){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
		/*clearing the rows here*/
		GPIOA->ODR &= ~(1U << 8);//PA8
 8001b5c:	23a0      	movs	r3, #160	; 0xa0
 8001b5e:	05db      	lsls	r3, r3, #23
 8001b60:	695a      	ldr	r2, [r3, #20]
 8001b62:	23a0      	movs	r3, #160	; 0xa0
 8001b64:	05db      	lsls	r3, r3, #23
 8001b66:	490c      	ldr	r1, [pc, #48]	; (8001b98 <clear_rows_keypad+0x40>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 9);//PB9
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <clear_rows_keypad+0x44>)
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <clear_rows_keypad+0x44>)
 8001b72:	490b      	ldr	r1, [pc, #44]	; (8001ba0 <clear_rows_keypad+0x48>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 5);//PB5
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <clear_rows_keypad+0x44>)
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <clear_rows_keypad+0x44>)
 8001b7e:	2120      	movs	r1, #32
 8001b80:	438a      	bics	r2, r1
 8001b82:	615a      	str	r2, [r3, #20]
		GPIOB->ODR &= ~(1U << 4);//PB4
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <clear_rows_keypad+0x44>)
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <clear_rows_keypad+0x44>)
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	615a      	str	r2, [r3, #20]
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	fffffeff 	.word	0xfffffeff
 8001b9c:	50000400 	.word	0x50000400
 8001ba0:	fffffdff 	.word	0xfffffdff

08001ba4 <set_rows_keypad>:

void set_rows_keypad(void){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
		/*seting the rows here*/
		GPIOA->ODR |= (1U << 8);//PA8
 8001ba8:	23a0      	movs	r3, #160	; 0xa0
 8001baa:	05db      	lsls	r3, r3, #23
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	23a0      	movs	r3, #160	; 0xa0
 8001bb0:	05db      	lsls	r3, r3, #23
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	0049      	lsls	r1, r1, #1
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 9);//PB9
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <set_rows_keypad+0x44>)
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <set_rows_keypad+0x44>)
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	0089      	lsls	r1, r1, #2
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 5);//PB5
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <set_rows_keypad+0x44>)
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <set_rows_keypad+0x44>)
 8001bce:	2120      	movs	r1, #32
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	615a      	str	r2, [r3, #20]
		GPIOB->ODR |= (1U << 4);//PB4
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <set_rows_keypad+0x44>)
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <set_rows_keypad+0x44>)
 8001bda:	2110      	movs	r1, #16
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	615a      	str	r2, [r3, #20]

}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	50000400 	.word	0x50000400

08001bec <Keypad_data>:

void Keypad_data(uint8_t input){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	1dfb      	adds	r3, r7, #7
 8001bf6:	701a      	strb	r2, [r3, #0]

	switch(input){
 8001bf8:	1dfb      	adds	r3, r7, #7
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d005      	beq.n	8001c0c <Keypad_data+0x20>
 8001c00:	dd0f      	ble.n	8001c22 <Keypad_data+0x36>
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d006      	beq.n	8001c14 <Keypad_data+0x28>
 8001c06:	2b0a      	cmp	r3, #10
 8001c08:	d007      	beq.n	8001c1a <Keypad_data+0x2e>
				k=0;

				break;

		}
}
 8001c0a:	e00b      	b.n	8001c24 <Keypad_data+0x38>
				k=1;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <Keypad_data+0x40>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
				break;
 8001c12:	e007      	b.n	8001c24 <Keypad_data+0x38>
				k=3;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <Keypad_data+0x40>)
 8001c16:	2203      	movs	r2, #3
 8001c18:	601a      	str	r2, [r3, #0]
				k=0;
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <Keypad_data+0x40>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
				break;
 8001c20:	e000      	b.n	8001c24 <Keypad_data+0x38>
			break;
 8001c22:	46c0      	nop			; (mov r8, r8)
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000080 	.word	0x20000080

08001c30 <main>:
 */


#include "bsp.h"

int main(void) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0


	BSP_init();
 8001c34:	f7fe fc48 	bl	80004c8 <BSP_init>

    while(1) {
 8001c38:	e7fe      	b.n	8001c38 <main+0x8>
	...

08001c3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c3c:	480d      	ldr	r0, [pc, #52]	; (8001c74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c3e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c40:	f000 f826 	bl	8001c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c46:	490d      	ldr	r1, [pc, #52]	; (8001c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <LoopForever+0xe>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	; (8001c88 <LoopForever+0x16>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c6a:	f000 f81d 	bl	8001ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c6e:	f7ff ffdf 	bl	8001c30 <main>

08001c72 <LoopForever>:

LoopForever:
    b LoopForever
 8001c72:	e7fe      	b.n	8001c72 <LoopForever>
  ldr   r0, =_estack
 8001c74:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001c80:	08001f74 	.word	0x08001f74
  ldr r2, =_sbss
 8001c84:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001c88:	20000108 	.word	0x20000108

08001c8c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC_COMP_IRQHandler>
	...

08001c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <SystemInit+0x14>)
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	0512      	lsls	r2, r2, #20
 8001c9a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__libc_init_array>:
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	2600      	movs	r6, #0
 8001cac:	4d0c      	ldr	r5, [pc, #48]	; (8001ce0 <__libc_init_array+0x38>)
 8001cae:	4c0d      	ldr	r4, [pc, #52]	; (8001ce4 <__libc_init_array+0x3c>)
 8001cb0:	1b64      	subs	r4, r4, r5
 8001cb2:	10a4      	asrs	r4, r4, #2
 8001cb4:	42a6      	cmp	r6, r4
 8001cb6:	d109      	bne.n	8001ccc <__libc_init_array+0x24>
 8001cb8:	2600      	movs	r6, #0
 8001cba:	f000 f903 	bl	8001ec4 <_init>
 8001cbe:	4d0a      	ldr	r5, [pc, #40]	; (8001ce8 <__libc_init_array+0x40>)
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	; (8001cec <__libc_init_array+0x44>)
 8001cc2:	1b64      	subs	r4, r4, r5
 8001cc4:	10a4      	asrs	r4, r4, #2
 8001cc6:	42a6      	cmp	r6, r4
 8001cc8:	d105      	bne.n	8001cd6 <__libc_init_array+0x2e>
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	00b3      	lsls	r3, r6, #2
 8001cce:	58eb      	ldr	r3, [r5, r3]
 8001cd0:	4798      	blx	r3
 8001cd2:	3601      	adds	r6, #1
 8001cd4:	e7ee      	b.n	8001cb4 <__libc_init_array+0xc>
 8001cd6:	00b3      	lsls	r3, r6, #2
 8001cd8:	58eb      	ldr	r3, [r5, r3]
 8001cda:	4798      	blx	r3
 8001cdc:	3601      	adds	r6, #1
 8001cde:	e7f2      	b.n	8001cc6 <__libc_init_array+0x1e>
 8001ce0:	08001f6c 	.word	0x08001f6c
 8001ce4:	08001f6c 	.word	0x08001f6c
 8001ce8:	08001f6c 	.word	0x08001f6c
 8001cec:	08001f70 	.word	0x08001f70

08001cf0 <malloc>:
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <malloc+0x10>)
 8001cf4:	0001      	movs	r1, r0
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	f000 f862 	bl	8001dc0 <_malloc_r>
 8001cfc:	bd10      	pop	{r4, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	20000000 	.word	0x20000000

08001d04 <free>:
 8001d04:	b510      	push	{r4, lr}
 8001d06:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <free+0x10>)
 8001d08:	0001      	movs	r1, r0
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	f000 f80e 	bl	8001d2c <_free_r>
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	20000000 	.word	0x20000000

08001d18 <memcpy>:
 8001d18:	2300      	movs	r3, #0
 8001d1a:	b510      	push	{r4, lr}
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d100      	bne.n	8001d22 <memcpy+0xa>
 8001d20:	bd10      	pop	{r4, pc}
 8001d22:	5ccc      	ldrb	r4, [r1, r3]
 8001d24:	54c4      	strb	r4, [r0, r3]
 8001d26:	3301      	adds	r3, #1
 8001d28:	e7f8      	b.n	8001d1c <memcpy+0x4>
	...

08001d2c <_free_r>:
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	0005      	movs	r5, r0
 8001d30:	2900      	cmp	r1, #0
 8001d32:	d010      	beq.n	8001d56 <_free_r+0x2a>
 8001d34:	1f0c      	subs	r4, r1, #4
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	da00      	bge.n	8001d3e <_free_r+0x12>
 8001d3c:	18e4      	adds	r4, r4, r3
 8001d3e:	0028      	movs	r0, r5
 8001d40:	f000 f8ae 	bl	8001ea0 <__malloc_lock>
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <_free_r+0x90>)
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <_free_r+0x2c>
 8001d4c:	6063      	str	r3, [r4, #4]
 8001d4e:	6014      	str	r4, [r2, #0]
 8001d50:	0028      	movs	r0, r5
 8001d52:	f000 f8a6 	bl	8001ea2 <__malloc_unlock>
 8001d56:	bd70      	pop	{r4, r5, r6, pc}
 8001d58:	42a3      	cmp	r3, r4
 8001d5a:	d909      	bls.n	8001d70 <_free_r+0x44>
 8001d5c:	6821      	ldr	r1, [r4, #0]
 8001d5e:	1860      	adds	r0, r4, r1
 8001d60:	4283      	cmp	r3, r0
 8001d62:	d1f3      	bne.n	8001d4c <_free_r+0x20>
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	1841      	adds	r1, r0, r1
 8001d6a:	6021      	str	r1, [r4, #0]
 8001d6c:	e7ee      	b.n	8001d4c <_free_r+0x20>
 8001d6e:	0013      	movs	r3, r2
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d001      	beq.n	8001d7a <_free_r+0x4e>
 8001d76:	42a2      	cmp	r2, r4
 8001d78:	d9f9      	bls.n	8001d6e <_free_r+0x42>
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	1858      	adds	r0, r3, r1
 8001d7e:	42a0      	cmp	r0, r4
 8001d80:	d10b      	bne.n	8001d9a <_free_r+0x6e>
 8001d82:	6820      	ldr	r0, [r4, #0]
 8001d84:	1809      	adds	r1, r1, r0
 8001d86:	1858      	adds	r0, r3, r1
 8001d88:	6019      	str	r1, [r3, #0]
 8001d8a:	4282      	cmp	r2, r0
 8001d8c:	d1e0      	bne.n	8001d50 <_free_r+0x24>
 8001d8e:	6810      	ldr	r0, [r2, #0]
 8001d90:	6852      	ldr	r2, [r2, #4]
 8001d92:	1841      	adds	r1, r0, r1
 8001d94:	6019      	str	r1, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	e7da      	b.n	8001d50 <_free_r+0x24>
 8001d9a:	42a0      	cmp	r0, r4
 8001d9c:	d902      	bls.n	8001da4 <_free_r+0x78>
 8001d9e:	230c      	movs	r3, #12
 8001da0:	602b      	str	r3, [r5, #0]
 8001da2:	e7d5      	b.n	8001d50 <_free_r+0x24>
 8001da4:	6821      	ldr	r1, [r4, #0]
 8001da6:	1860      	adds	r0, r4, r1
 8001da8:	4282      	cmp	r2, r0
 8001daa:	d103      	bne.n	8001db4 <_free_r+0x88>
 8001dac:	6810      	ldr	r0, [r2, #0]
 8001dae:	6852      	ldr	r2, [r2, #4]
 8001db0:	1841      	adds	r1, r0, r1
 8001db2:	6021      	str	r1, [r4, #0]
 8001db4:	6062      	str	r2, [r4, #4]
 8001db6:	605c      	str	r4, [r3, #4]
 8001db8:	e7ca      	b.n	8001d50 <_free_r+0x24>
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	2000008c 	.word	0x2000008c

08001dc0 <_malloc_r>:
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	b570      	push	{r4, r5, r6, lr}
 8001dc4:	1ccd      	adds	r5, r1, #3
 8001dc6:	439d      	bics	r5, r3
 8001dc8:	3508      	adds	r5, #8
 8001dca:	0006      	movs	r6, r0
 8001dcc:	2d0c      	cmp	r5, #12
 8001dce:	d21e      	bcs.n	8001e0e <_malloc_r+0x4e>
 8001dd0:	250c      	movs	r5, #12
 8001dd2:	42a9      	cmp	r1, r5
 8001dd4:	d81d      	bhi.n	8001e12 <_malloc_r+0x52>
 8001dd6:	0030      	movs	r0, r6
 8001dd8:	f000 f862 	bl	8001ea0 <__malloc_lock>
 8001ddc:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <_malloc_r+0xb4>)
 8001dde:	6814      	ldr	r4, [r2, #0]
 8001de0:	0021      	movs	r1, r4
 8001de2:	2900      	cmp	r1, #0
 8001de4:	d119      	bne.n	8001e1a <_malloc_r+0x5a>
 8001de6:	4c24      	ldr	r4, [pc, #144]	; (8001e78 <_malloc_r+0xb8>)
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <_malloc_r+0x36>
 8001dee:	0030      	movs	r0, r6
 8001df0:	f000 f844 	bl	8001e7c <_sbrk_r>
 8001df4:	6020      	str	r0, [r4, #0]
 8001df6:	0029      	movs	r1, r5
 8001df8:	0030      	movs	r0, r6
 8001dfa:	f000 f83f 	bl	8001e7c <_sbrk_r>
 8001dfe:	1c43      	adds	r3, r0, #1
 8001e00:	d12b      	bne.n	8001e5a <_malloc_r+0x9a>
 8001e02:	230c      	movs	r3, #12
 8001e04:	0030      	movs	r0, r6
 8001e06:	6033      	str	r3, [r6, #0]
 8001e08:	f000 f84b 	bl	8001ea2 <__malloc_unlock>
 8001e0c:	e003      	b.n	8001e16 <_malloc_r+0x56>
 8001e0e:	2d00      	cmp	r5, #0
 8001e10:	dadf      	bge.n	8001dd2 <_malloc_r+0x12>
 8001e12:	230c      	movs	r3, #12
 8001e14:	6033      	str	r3, [r6, #0]
 8001e16:	2000      	movs	r0, #0
 8001e18:	bd70      	pop	{r4, r5, r6, pc}
 8001e1a:	680b      	ldr	r3, [r1, #0]
 8001e1c:	1b5b      	subs	r3, r3, r5
 8001e1e:	d419      	bmi.n	8001e54 <_malloc_r+0x94>
 8001e20:	2b0b      	cmp	r3, #11
 8001e22:	d903      	bls.n	8001e2c <_malloc_r+0x6c>
 8001e24:	600b      	str	r3, [r1, #0]
 8001e26:	18cc      	adds	r4, r1, r3
 8001e28:	6025      	str	r5, [r4, #0]
 8001e2a:	e003      	b.n	8001e34 <_malloc_r+0x74>
 8001e2c:	684b      	ldr	r3, [r1, #4]
 8001e2e:	428c      	cmp	r4, r1
 8001e30:	d10d      	bne.n	8001e4e <_malloc_r+0x8e>
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	0030      	movs	r0, r6
 8001e36:	f000 f834 	bl	8001ea2 <__malloc_unlock>
 8001e3a:	0020      	movs	r0, r4
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	300b      	adds	r0, #11
 8001e40:	1d23      	adds	r3, r4, #4
 8001e42:	4390      	bics	r0, r2
 8001e44:	1ac3      	subs	r3, r0, r3
 8001e46:	d0e7      	beq.n	8001e18 <_malloc_r+0x58>
 8001e48:	425a      	negs	r2, r3
 8001e4a:	50e2      	str	r2, [r4, r3]
 8001e4c:	e7e4      	b.n	8001e18 <_malloc_r+0x58>
 8001e4e:	6063      	str	r3, [r4, #4]
 8001e50:	000c      	movs	r4, r1
 8001e52:	e7ef      	b.n	8001e34 <_malloc_r+0x74>
 8001e54:	000c      	movs	r4, r1
 8001e56:	6849      	ldr	r1, [r1, #4]
 8001e58:	e7c3      	b.n	8001de2 <_malloc_r+0x22>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	1cc4      	adds	r4, r0, #3
 8001e5e:	439c      	bics	r4, r3
 8001e60:	42a0      	cmp	r0, r4
 8001e62:	d0e1      	beq.n	8001e28 <_malloc_r+0x68>
 8001e64:	1a21      	subs	r1, r4, r0
 8001e66:	0030      	movs	r0, r6
 8001e68:	f000 f808 	bl	8001e7c <_sbrk_r>
 8001e6c:	1c43      	adds	r3, r0, #1
 8001e6e:	d1db      	bne.n	8001e28 <_malloc_r+0x68>
 8001e70:	e7c7      	b.n	8001e02 <_malloc_r+0x42>
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	2000008c 	.word	0x2000008c
 8001e78:	20000090 	.word	0x20000090

08001e7c <_sbrk_r>:
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	b570      	push	{r4, r5, r6, lr}
 8001e80:	4c06      	ldr	r4, [pc, #24]	; (8001e9c <_sbrk_r+0x20>)
 8001e82:	0005      	movs	r5, r0
 8001e84:	0008      	movs	r0, r1
 8001e86:	6023      	str	r3, [r4, #0]
 8001e88:	f000 f80c 	bl	8001ea4 <_sbrk>
 8001e8c:	1c43      	adds	r3, r0, #1
 8001e8e:	d103      	bne.n	8001e98 <_sbrk_r+0x1c>
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d000      	beq.n	8001e98 <_sbrk_r+0x1c>
 8001e96:	602b      	str	r3, [r5, #0]
 8001e98:	bd70      	pop	{r4, r5, r6, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	20000104 	.word	0x20000104

08001ea0 <__malloc_lock>:
 8001ea0:	4770      	bx	lr

08001ea2 <__malloc_unlock>:
 8001ea2:	4770      	bx	lr

08001ea4 <_sbrk>:
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <_sbrk+0x18>)
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	2900      	cmp	r1, #0
 8001eac:	d101      	bne.n	8001eb2 <_sbrk+0xe>
 8001eae:	4904      	ldr	r1, [pc, #16]	; (8001ec0 <_sbrk+0x1c>)
 8001eb0:	6019      	str	r1, [r3, #0]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	1882      	adds	r2, r0, r2
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	4770      	bx	lr
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	20000094 	.word	0x20000094
 8001ec0:	20000108 	.word	0x20000108

08001ec4 <_init>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eca:	bc08      	pop	{r3}
 8001ecc:	469e      	mov	lr, r3
 8001ece:	4770      	bx	lr

08001ed0 <_fini>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ed6:	bc08      	pop	{r3}
 8001ed8:	469e      	mov	lr, r3
 8001eda:	4770      	bx	lr
